import { OnOATResolved } from "../ObjectAttributeTypeExtractor";
import { FormConfigSymbol } from './decorators/FormConfig';
import { ArrayOptionsSymbol } from './decorators/ArrayOptions';
import { ObjectOptionsSymbol } from './decorators/ObjectOptions';
import { AutocompleteSymbol } from './decorators/AutocompleteOptions';
import { ChoiceOptionsSymbol } from './decorators/ChoiceOptions';
import { MultipleChoicesOptionsSymbol } from './decorators/MultipleChoicesOptions';
import { FlexibleObjectArraySymbol } from "./decorators/FlexibleObjectArray";
import { MatExtraOptionsSymbol } from "./decorators/MatExtraOptions";
export function onOATResolved(target, key, resolved) {
    if (!resolved.formFactory) {
        resolved.formFactory = {};
        [
            FormConfigSymbol,
            ArrayOptionsSymbol,
            ObjectOptionsSymbol,
            ChoiceOptionsSymbol,
            MultipleChoicesOptionsSymbol,
            FlexibleObjectArraySymbol,
            AutocompleteSymbol,
            MatExtraOptionsSymbol
        ].forEach((eachSymbol) => {
            let getMetadataArgs = [eachSymbol, target];
            if (key) {
                getMetadataArgs.push(key);
            }
            if (Reflect.hasMetadata.apply(Reflect, getMetadataArgs)) {
                resolved.formFactory = Object.assign({}, resolved.formFactory, Reflect.getMetadata.apply(Reflect, getMetadataArgs));
            }
        });
    }
}
export function SetupConfig() {
    return OnOATResolved(onOATResolved);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmdGb3JtRmFjdG9yeURlY29yYXRvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9oYi1uZy1mb3JtLyIsInNvdXJjZXMiOlsibGliL2NsYXNzL05nRm9ybUZhY3RvcnlEZWNvcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVyRSxNQUFNLFVBQVUsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUTtJQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtRQUN2QixRQUFRLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUMxQjtZQUNJLGdCQUFnQjtZQUNoQixrQkFBa0I7WUFDbEIsbUJBQW1CO1lBQ25CLG1CQUFtQjtZQUNuQiw0QkFBNEI7WUFDNUIseUJBQXlCO1lBQ3pCLGtCQUFrQjtZQUNsQixxQkFBcUI7U0FDeEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNyQixJQUFJLGVBQWUsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUUzQyxJQUFJLEdBQUcsRUFBRTtnQkFDTCxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzdCO1lBRUQsSUFDSSxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLEVBQ3JEO2dCQUNFLFFBQVEsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ25DLFFBQVEsQ0FBQyxXQUFXLEVBQ3BCLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FDdEQsQ0FBQzthQUNMO1FBQ0wsQ0FBQyxDQUFDLENBQUM7S0FDTjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVztJQUN2QixPQUFPLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25PQVRSZXNvbHZlZCB9IGZyb20gXCIuLi9PYmplY3RBdHRyaWJ1dGVUeXBlRXh0cmFjdG9yXCI7XG5cbmltcG9ydCB7IEZvcm1Db25maWdTeW1ib2wgfSBmcm9tICcuL2RlY29yYXRvcnMvRm9ybUNvbmZpZyc7XG5pbXBvcnQgeyBBcnJheU9wdGlvbnNTeW1ib2wgfSBmcm9tICcuL2RlY29yYXRvcnMvQXJyYXlPcHRpb25zJztcbmltcG9ydCB7IE9iamVjdE9wdGlvbnNTeW1ib2wgfSBmcm9tICcuL2RlY29yYXRvcnMvT2JqZWN0T3B0aW9ucyc7XG5pbXBvcnQgeyBBdXRvY29tcGxldGVTeW1ib2wgfSBmcm9tICcuL2RlY29yYXRvcnMvQXV0b2NvbXBsZXRlT3B0aW9ucyc7XG5pbXBvcnQgeyBDaG9pY2VPcHRpb25zU3ltYm9sIH0gZnJvbSAnLi9kZWNvcmF0b3JzL0Nob2ljZU9wdGlvbnMnO1xuaW1wb3J0IHsgTXVsdGlwbGVDaG9pY2VzT3B0aW9uc1N5bWJvbCB9IGZyb20gJy4vZGVjb3JhdG9ycy9NdWx0aXBsZUNob2ljZXNPcHRpb25zJztcbmltcG9ydCB7IEZsZXhpYmxlT2JqZWN0QXJyYXlTeW1ib2wgfSBmcm9tIFwiLi9kZWNvcmF0b3JzL0ZsZXhpYmxlT2JqZWN0QXJyYXlcIjtcbmltcG9ydCB7IE1hdEV4dHJhT3B0aW9uc1N5bWJvbCB9IGZyb20gXCIuL2RlY29yYXRvcnMvTWF0RXh0cmFPcHRpb25zXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk9BVFJlc29sdmVkKHRhcmdldCwga2V5LCByZXNvbHZlZCkge1xuICAgIGlmICghcmVzb2x2ZWQuZm9ybUZhY3RvcnkpIHtcbiAgICAgICAgcmVzb2x2ZWQuZm9ybUZhY3RvcnkgPSB7fTtcbiAgICAgICAgW1xuICAgICAgICAgICAgRm9ybUNvbmZpZ1N5bWJvbCxcbiAgICAgICAgICAgIEFycmF5T3B0aW9uc1N5bWJvbCxcbiAgICAgICAgICAgIE9iamVjdE9wdGlvbnNTeW1ib2wsXG4gICAgICAgICAgICBDaG9pY2VPcHRpb25zU3ltYm9sLFxuICAgICAgICAgICAgTXVsdGlwbGVDaG9pY2VzT3B0aW9uc1N5bWJvbCxcbiAgICAgICAgICAgIEZsZXhpYmxlT2JqZWN0QXJyYXlTeW1ib2wsXG4gICAgICAgICAgICBBdXRvY29tcGxldGVTeW1ib2wsXG4gICAgICAgICAgICBNYXRFeHRyYU9wdGlvbnNTeW1ib2xcbiAgICAgICAgXS5mb3JFYWNoKChlYWNoU3ltYm9sKSA9PiB7XG4gICAgICAgICAgICBsZXQgZ2V0TWV0YWRhdGFBcmdzID0gW2VhY2hTeW1ib2wsIHRhcmdldF07XG5cbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBnZXRNZXRhZGF0YUFyZ3MucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgUmVmbGVjdC5oYXNNZXRhZGF0YS5hcHBseShSZWZsZWN0LCBnZXRNZXRhZGF0YUFyZ3MpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZC5mb3JtRmFjdG9yeSA9IE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkLmZvcm1GYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICBSZWZsZWN0LmdldE1ldGFkYXRhLmFwcGx5KFJlZmxlY3QsIGdldE1ldGFkYXRhQXJncylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXR1cENvbmZpZygpIHtcbiAgICByZXR1cm4gT25PQVRSZXNvbHZlZChvbk9BVFJlc29sdmVkKTtcbn1cbiJdfQ==