{"__symbolic":"module","version":4,"metadata":{"HbFormArrayComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"HbFormWidgetComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"hb-form-array","inputs":["key","data","parent"],"template":"<div [attr.id]=\"data.id\"\n     class=\"hb-form-array {{ data.arrayType }} hb-form-array_{{ key }} {{ data?.html?.classAttr }}\"\n     *ngIf=\"\n         data.control != undefined &&\n         key != 'setValue' && (\n             data.hide == undefined ||\n             !data.hide\n         )\n     \"\n     [formGroup]=\"data.control\"\n     [ngClass]=\"{\n         'hb-form-with-hints' : data.hints\n     }\"\n>\n    <header>\n        <h2 *ngIf=\"!data.hideHeader\">{{ data.label }}</h2>\n\n        <ng-container *ngIf=\"data.childrenConfigName.length > 0\">\n            <ng-container *ngIf=\"!data.expandOptions; else expandedArrayPushOptions\">\n                <select class=\"hb-form-array-config-switch\"\n                        [(ngModel)]=\"data.useConfig\" [ngModelOptions]=\"{standalone: true}\">\n                    <option *ngFor=\"let configName of data.childrenConfigName; let i = index\" [value]=\"i\">\n                        {{ configName }}\n                    </option>\n                </select>\n\n                <button class=\"btn btn-default hb-form-add-btn\" type=\"button\" *ngIf=\"data.arrayType != 'enum'\" (click)=\"data.add()\">Add</button>\n            </ng-container>\n\n            <ng-template #expandedArrayPushOptions>\n                <button type=\"button\"\n                        class=\"btn btn-default hb-form-add-btn hb-form-add-btn-expanded-{{ i }}\"\n                        *ngFor=\"let configName of data.childrenConfigName; let i = index\"\n                        (click)=\"data.useConfig = i; data.add();\">\n                    &#x253C; {{ configName }}\n                </button>\n            </ng-template>\n        </ng-container>\n    </header>\n\n    <div [attr.id]=\"data.id ? (data.id + '_' + i) : null\"\n         class=\"hb-form-array-cell hb-form-array-cell_{{ cell?.flexibleObjectTypeName?.toLowerCase() }} {{ cell?.html?.classAttr }}\"\n         *ngFor=\"let cell of (data.arrayType != 'enum' ? data.children : resolvedOptions | async); let i=index\">\n        <hb-form-widget *ngIf=\"data.arrayType == 'enum'\"\n                        [data]=\"cell\"\n                        [key]=\"i\"\n                        [parent]=\"data\"></hb-form-widget>\n\n        <ng-container *ngIf=\"data.arrayType != 'enum'\">\n            <div *ngFor=\"let each of cell.children | mapToIterable;\"\n                 class=\"panel panel-default hb-form-array-cell-attr_{{ each.key }}\">\n                <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                    <hb-form-widget *ngIf=\"each.val.groupType == undefined\"\n                                    [data]=\"each.val\"\n                                    [key]=\"i\"\n                                    [parent]=\"data\"></hb-form-widget>\n                    <hb-form-array *ngIf=\"each.val?.groupType == 'array'\"\n                                   [data]=\"each.val\"\n                                   [key]=\"each.key\"\n                                   [parent]=\"data\"></hb-form-array>\n                    <hb-form-object *ngIf=\"each.val?.groupType == 'object'\"\n                                    [data]=\"each.val\"\n                                    [key]=\"each.key\"\n                                    [parent]=\"data\"></hb-form-object>\n                </ng-container>\n            </div>\n        </ng-container>\n\n        <button class=\"btn btn-default hb-form-remove-btn\"\n                type=\"button\"\n                *ngIf=\"data.arrayType != 'enum'\"\n                (click)=\"data.remove(i)\">\n            &#x2715;\n        </button>\n    </div>\n\n    <div class=\"hints\" *ngIf=\"data?.hints\">\n        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n    </div>\n</div>\n"}]}],"members":{}},"HbFormMatArrayComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"HbFormArrayComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"hb-mat-form-array","inputs":["key","data","parent"],"template":"<mat-card class=\"hb-form-array hb-array-type_{{ data.arrayType }} hb-form-array_{{ key }} {{ data?.html?.classAttr }}\"\n          [attr.id]=\"data.id\"\n          *ngIf=\"\n              data.control != undefined &&\n              key != 'setValue' && (\n                  data.hide == undefined ||\n                  !data.hide\n              )\n          \"\n          [formGroup]=\"data.control\"\n          [ngClass]=\"{\n              'hb-form-with-hints' : data.hints\n          }\">\n    <mat-card-header>\n        <mat-card-title *ngIf=\"!data.hideHeader\">\n            <h2 *ngIf=\"data.label != ''\">{{ data.label }}</h2>\n\n            <ng-container *ngIf=\"data.childrenConfigName.length > 0\">\n                <ng-container *ngIf=\"!data.expandOptions; else expandedArrayPushOptions\">\n                    <mat-form-field>\n                        <mat-select class=\"hb-form-array-config-switch\"\n                                    [(ngModel)]=\"data.useConfig\"\n                                    [ngModelOptions]=\"{standalone: true}\">\n                            <mat-option *ngFor=\"let configName of data.childrenConfigName; let i = index\" [value]=\"i\">\n                                {{ configName }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n\n                    <button mat-raised-button\n                            type=\"button\"\n                            class=\"btn btn-default hb-form-add-btn\"\n                            *ngIf=\"data.arrayType != 'enum'\"\n                            (click)=\"data.add()\"\n                    >\n                        Add\n                    </button>\n                </ng-container>\n\n                <ng-template #expandedArrayPushOptions>\n                    <button mat-raised-button\n                            type=\"button\"\n                            *ngFor=\"let configName of data.childrenConfigName; let i = index\"\n                            (click)=\"data.useConfig = i; data.add();\">\n                        &#x253C; {{ configName }}\n                    </button>\n                </ng-template>\n            </ng-container>\n        </mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content>\n        <div [attr.id]=\"data.id + '-' + i\"\n             class=\"hb-form-array-cell hb-form-array-cell_{{ cell?.flexibleObjectTypeName?.toLowerCase() }} {{ cell?.html?.classAttr }}\"\n             *ngFor=\"\n                 let cell of data.arrayType != 'enum' ?\n                     data.children : resolvedOptions | async\n                 ; let i=index\n             \">\n            <hb-mat-form-widget *ngIf=\"data.arrayType == 'enum'\" [data]=\"cell\" [key]=\"i\" [parent]=\"data\"></hb-mat-form-widget>\n\n            <ng-container *ngIf=\"data.arrayType != 'enum'\">\n                <div *ngFor=\"let each of cell.children | mapToIterable;\"\n                     class=\"hb-form-array-cell-attr_{{ each.key }}\">\n                    <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                        <hb-mat-form-widget *ngIf=\"each.val.groupType == undefined\" [data]=\"each.val\" [key]=\"i\" [parent]=\"data\">\n                        </hb-mat-form-widget>\n                        <hb-mat-form-array *ngIf=\"each.val?.groupType == 'array'\" [data]=\"each.val\" [key]=\"each.key\" [parent]=\"data\">\n                        </hb-mat-form-array>\n                        <hb-mat-form-object *ngIf=\"each.val?.groupType == 'object'\" [data]=\"each.val\" [key]=\"each.key\" [parent]=\"data\">\n                        </hb-mat-form-object>\n                    </ng-container>\n                </div>\n            </ng-container>\n\n            <button mat-mini-fab color=\"primary\" class=\"hb-form-remove-btn\" type=\"button\"\n                    *ngIf=\"data.arrayType != 'enum'\"\n                    (click)=\"data.remove(i)\">\n                &#x2715;\n            </button>\n        </div>\n\n        <strong class=\"mat-hint\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </strong>\n    </mat-card-content>\n</mat-card>\n"}]}],"members":{}},"HbFormMatObjectComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"HbFormObjectComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"hb-mat-form-object","inputs":["id","key","data","parent"],"template":"<mat-card *ngIf=\"\n    data.control != undefined &&\n    key != 'setValue' && (\n        data.hide == undefined ||\n        !data.hide\n    )\"\n          [formGroup]=\"data.control\"\n          [ngClass]=\"{\n        'error': !data.control.valid,\n        'hb-form-with-hints' : data.hints\n    }\"\n          class=\"form-object {{ data?.html?.classAttr }} hb-form-obj_{{ key }}\">\n    <mat-card-header *ngIf=\"typeof(data.label) == 'string' && data.label != '' && !data.hideHeader\">\n        <mat-card-title>\n            {{ data.label }}\n        </mat-card-title>\n    </mat-card-header>\n    <mat-card-content class=\"hb-form-object-content\">\n        <div *ngFor=\"let each of data.children | mapToIterable\" class=\"hb-form-obj-attr_{{ each.key }}\">\n            <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                <hb-mat-form-widget\n                        *ngIf=\"each.val.groupType == undefined && each.key != 'setValue'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-widget>\n                <hb-mat-form-array\n                        *ngIf=\"each.val?.groupType == 'array'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [formArrayName]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-array>\n                <hb-mat-form-object\n                        *ngIf=\"each.val?.groupType == 'object' && each.key != 'setValue'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-object>\n            </ng-container>\n        </div>\n        <strong class=\"mat-hint\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </strong>\n    </mat-card-content>\n</mat-card>\n"}]}],"members":{}},"HbFormObjectComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"HbFormWidgetComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"hb-form-object","inputs":["id","key","data","parent"],"template":"<div *ngIf=\"\n        data.control != undefined &&\n        key != 'setValue' && (\n            data.hide == undefined ||\n            !data.hide\n        )\n    \"\n     [formGroup]=\"data.control\"\n     [ngClass]=\"{\n         'error': !data.control.valid,\n         'hb-form-with-hints' : data.hints\n     }\"\n     class=\"form-object {{ data?.html?.classAttr }} hb-form-obj_{{ key }}\"\n>\n    <h2 *ngIf=\"typeof(data.label) == 'string' && data.label != '' && !data.hideHeader\">\n        {{ data.label }}\n    </h2>\n\n    <div class=\"hb-form-object-content\">\n        <div *ngFor=\"let each of data.children | mapToIterable\" class=\"hb-form-obj-attr_{{ each.key }}\">\n            <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                <hb-form-widget\n                    *ngIf=\"each.val.groupType == undefined && each.key != 'setValue'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-widget>\n                <hb-form-array\n                    *ngIf=\"each.val?.groupType == 'array'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [formArrayName]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-array>\n                <hb-form-object\n                    *ngIf=\"each.val?.groupType == 'object' && each.key != 'setValue'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-object>\n            </ng-container>\n        </div>\n\n        <span class=\"hints\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </span>\n    </div>\n</div>\n"}]}],"members":{}},"HbFormWidgetComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"hb-form-widget","inputs":["data","key","parent"],"template":"<div *ngIf=\"\n         data.control != undefined &&\n         (\n             data.groupType == undefined ||\n             parent.arrayType == 'enum'\n         ) &&\n         key != 'setValue' &&\n         (\n             data.hide == undefined ||\n             !data.hide\n         )\n    \"\n    [ngClass]=\"{\n        'error': !data.control.valid,\n        'hb-form-with-hints' : data.hints\n    }\"\n    class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }} {{ data?.html?.classAttr }}\"\n>\n    <ng-container *ngIf=\"!data.useComponent; else customBlock\">\n        <label *ngIf=\"data.label\"\n               [attr.for]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\"\n               [attr.class]=\"data?.html?.class?.label\">{{ data.label }}</label>\n\n        <ng-container *ngIf=\"parent?.arrayType !== 'enum'\">\n            <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n                <div *ngIf=\"data.selectOptionsObservables == undefined; else autocompleteBlock\"\n                     class=\"hb-form-widget-input-field\">\n                    <input [attr.id]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           (change)=\"data.control.patchValue($event.target.value)\"\n                           [placeholder]=\"data.placeholder !== undefined ? data.placeholder : ''\"\n                           [formControl]=\"data.control\" />\n                </div>\n\n                <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n<!--                        Autocomplete is not well supported in hb-form-widget-->\n\n<!--                        <div *ngIf=\"data.autocomplete.renderType != 'custom'; else autocompleteCustomizeBlock\" -->\n<!--                             class=\"hb-form-widget-input-field autocomplete\">-->\n<!--                            <input [attr.id]=\"key ? key : data.slug + '-input'\"-->\n<!--                                   [type]=\"data.renderType ? data.renderType : 'text'\"-->\n<!--                                   (change)=\"data.control.patchValue($event.target.value)\"-->\n<!--                                   [placeholder]=\"data.label !== undefined ? data.label : data.option.name\"-->\n<!--                                   [formControl]=\"data.control\" />-->\n\n<!--                            <autocomplete #auto=\"matAutocomplete\">-->\n<!--                                <option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">-->\n<!--                                    <span>{{ option.label }}</span>-->\n<!--                                </option>-->\n<!--                            </autocomplete>-->\n\n<!--                            <span class=\"hints\" *ngIf=\"data?.hints\">-->\n<!--                                {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}-->\n<!--                            </span>-->\n<!--                        </div>-->\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"data.renderType == 'textarea'\">\n                <textarea [rows]=\"data?.html?.textarea?.row || 5\" [formControl]=\"data.control\"\n                          [attr.id]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\">\n                </textarea>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isOptionSelectingComponent()\">\n\n            <ng-container *ngIf=\"data.renderType != 'select'; else selectBlock\">\n                <ng-container *ngFor=\"let option of resolvedOptions | async\">\n                    <label *ngIf=\"parent?.arrayType == 'enum' || data.renderType != 'checkbox'\"\n                           for=\"hb-form-widget_{{ key ? key : data.slug }}-input__{{ slugifyString(option.name) }}\">{{ option.name }}</label>\n\n                    <ng-container *ngIf=\"data.renderType == 'radio'; else checkBoxBlock\">\n                        <input type=\"radio\"\n                               id=\"hb-form-widget_{{ key ? key : data.slug }}-input__{{ slugifyString(option.name) }}\"\n                               class=\"example-radio-button\"\n                               [value]=\"option.value\"\n                               [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                               [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.slug) + '-input' : null\"\n                               (select)=\"parent?.arrayType == 'enum' ? updateParentValue($event, option) : data.control.patchValue($event.target.value)\"\n                               [formControl]=\"data.control\"\n                        />\n                    </ng-container>\n\n                    <ng-template #checkBoxBlock>\n                        <ng-container *ngIf=\"parent?.arrayType == 'enum'; else booleanCheckBoxBlock\">\n                            <input type=\"checkbox\"\n                                   [value]=\"option.value\"\n                                   [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                                   (change)=\"parent?.arrayType == 'enum' ? updateParentValue($event, option) : data.control.patchValue($event.target.value)\"\n                                   [formControl]=\"data.control\"/>\n                        </ng-container>\n\n                        <ng-template #booleanCheckBoxBlock>\n                            <input type=\"checkbox\"\n                                   [checked]=\"data.control.value ? true : null\"\n                                   (change)=\"data.control.patchValue($event.target.checked)\"/>\n                        </ng-template>\n                    </ng-template>\n                </ng-container>\n            </ng-container>\n\n            <ng-template #selectBlock>\n                <select *ngIf=\"data.renderType == 'select'\"\n                        [formControl]=\"data.control\"\n                        [attr.placeholder]=\"data.label != undefined ? data.label : ''\"\n                >\n                    <option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </option>\n                </select>\n            </ng-template>\n        </ng-container>\n\n        <span class=\"hints\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n        </span>\n    </ng-container>\n\n    <ng-template #customBlock></ng-template>\n</div>\n"}]}],"members":{"customBlock":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":26,"character":5},"arguments":["customBlock",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ViewContainerRef","line":26,"character":38},"static":true}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver","line":29,"character":26}]}],"log":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"isOptionSelectingComponent":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"stringToBoolean":[{"__symbolic":"method"}],"updateParentValue":[{"__symbolic":"method"}],"typeof":[{"__symbolic":"method"}],"slugifyString":[{"__symbolic":"method"}]},"statics":{"slugMap":[]}},"HbFormMatWidgetComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"HbFormWidgetComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"hb-mat-form-widget","inputs":["data","key","parent"],"template":"<div *ngIf=\"\n         data.control != undefined &&\n         (\n             data.groupType == undefined ||\n             parent.arrayType == 'enum'\n         ) &&\n         key != 'setValue' &&\n         (\n             data.hide == undefined ||\n             !data.hide\n         )\n     \"\n     [ngClass]=\"{\n         'error': !data.control.valid,\n         'hb-form-with-hints' : data.hints\n     }\"\n     class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }} {{ data?.html?.classAttr }}\"\n>\n    <ng-template #customBlock></ng-template>\n\n    <ng-container *ngIf=\"\n        !data.useComponent &&\n        parent?.arrayType !== 'enum'\n    \">\n        <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n            <mat-form-field *ngIf=\"data.selectOptionsObservables == undefined; else autocompleteBlock\" class=\"hb-form-widget-input-field\">\n                <div class=\"form-field-prefix\"\n                     matPrefix\n                     *ngIf=\"data?.matExtra?.matPrefix\"\n                     [innerHtml]=\"data.matExtra.matPrefix\"\n                ></div>\n\n                <input matInput\n                       [attr.id]=\"(key ? key : data.slug) + '-input'\"\n                       [type]=\"data.renderType ? data.renderType : 'text'\"\n                       (change)=\"data.control.patchValue($event.target.value)\"\n                       [placeholder]=\"data.label !== undefined ? data.label : null\"\n                       [formControl]=\"data.control\" />\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n\n                <div class=\"form-field-suffix\"\n                     matSuffix\n                     *ngIf=\"data?.matExtra?.matSuffix\"\n                     [innerHtml]=\"data.matExtra.matSuffix\"></div>\n            </mat-form-field>\n\n            <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n                <mat-form-field *ngIf=\"data.autocomplete.renderType != 'custom';\">\n<!--                  else autocompleteCustomizeBlock-->\n                    <input matInput\n                           [attr.id]=\"key ? key : data.slug + '-input'\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           (change)=\"data.control.patchValue($event.target.value);\"\n                           placeholder=\"{{ data.label !== undefined ? data.label : data.option.name }}\"\n                           [formControl]=\"data.control\"\n                           [matAutocomplete]=\"auto\" />\n\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">\n                            <span>{{ option.label }}</span>\n                        </mat-option>\n                    </mat-autocomplete>\n\n                    <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                        <strong>\n                            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                        </strong>\n                    </mat-hint>\n                </mat-form-field>\n            </ng-template>\n        </ng-container>\n\n        <mat-form-field *ngIf=\"data.renderType === 'textarea'\">\n            <textarea matInput rows=\"5\" [formControl]=\"data.control\"\n                      [placeholder]=\"data.label ? data.label : data.option.name\"\n                      [attr.id]=\"key ? key : data.slug + '-input'\">\n            </textarea>\n\n            <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                <strong>\n                    {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                </strong>\n            </mat-hint>\n        </mat-form-field>\n    </ng-container>\n\n    <ng-container *ngIf=\"!data.useComponent && ['radio', 'checkbox', 'select'].indexOf(data.renderType) > -1\">\n        <div *ngIf=\"data.renderType != 'select'; else selectBlock\">\n            <mat-radio-group *ngIf=\"data.renderType == 'radio'; else checkBoxBlock\" [formControl]=\"data.control\">\n                <mat-radio-button\n                    class=\"example-radio-button\"\n                    *ngFor=\"let option of data.options\"\n                    [value]=\"option.value\"\n                    [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                    [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.slug) + '-input' : null\"\n                    (change)=\"updateParentValue($event, option)\"\n                >\n                    {{ option.name }}\n                </mat-radio-button>\n            </mat-radio-group>\n\n            <ng-template #checkBoxBlock>\n                <ng-container *ngIf=\"parent?.arrayType == 'enum'; else booleanCheckboxBlock\">\n                    <mat-checkbox\n                        *ngFor=\"let option of data.options\"\n                        [value]=\"option.value\"\n                        [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                        (change)=\"updateParentValue($event, option)\"\n                        [formControl]=\"data.control\"\n                    >\n                        {{ option.name }}\n                    </mat-checkbox>\n                </ng-container>\n\n                <ng-template #booleanCheckboxBlock>\n                    <label>{{ data.label }}</label>\n                    <mat-checkbox [checked]=\"data.control.value ? true : null\"\n                                  (change)=\"data.control.patchValue($event.source.checked)\">\n                    </mat-checkbox>\n                </ng-template>\n            </ng-template>\n        </div>\n\n        <ng-template #selectBlock>\n            <mat-form-field>\n                <mat-select\n                    *ngIf=\"data.renderType == 'select'\"\n                    [formControl]=\"data.control\"\n                    [placeholder]=\"data.label != undefined ? data.label : null\"\n                >\n                    <mat-option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </mat-option>\n                </mat-select>\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n            </mat-form-field>\n        </ng-template>\n    </ng-container>\n</div>\n"}]}],"members":{"ngOnInit":[{"__symbolic":"method"}]}},"Ng2FormFactory":{"__symbolic":"class","members":{},"statics":{"generateFormGroupByObject":{"__symbolic":"function","parameters":["formBuilder","object","resolveTypeAny","options"],"defaults":[null,null,null,{}],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Ng2FormFactory"},"member":"generateFormGroupByOATMapping"},"arguments":[{"__symbolic":"reference","name":"formBuilder"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"ObjectAttributeTypeExtractor"},"member":"generateMapping"},"arguments":[{"__symbolic":"reference","name":"object"},{"__symbolic":"reference","name":"options"}]},{"__symbolic":"reference","name":"resolveTypeAny"}]}},"diContainer":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"Map"}}}},"onOATResolved":{"__symbolic":"function"},"SetupConfig":{"__symbolic":"function","parameters":[],"value":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"OnOATResolved"},"arguments":[{"__symbolic":"reference","name":"onOATResolved"}]}},"RenderType":{"__symbolic":"interface"},"HtmlElementAttribute":{"__symbolic":"interface"},"IBaseFormConfig":{"__symbolic":"interface"},"FormConfigSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["FormConfig"]},"FormConfig":{"__symbolic":"function"},"IArrayOptionsFormConfig":{"__symbolic":"interface"},"ArrayOptionsSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IArrayOptionsFormConfig"]},"ArrayOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"ArrayOptionsSymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{},{"__symbolic":"reference","name":"options"}]}]}},"IObjectOptionsFormConfig":{"__symbolic":"interface"},"ObjectOptionsSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IObjectOptionsFormConfig"]},"ObjectOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"ObjectOptionsSymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{},{"__symbolic":"reference","name":"options"}]}]}},"IAutocompleteOptions":{"__symbolic":"interface"},"AutocompleteSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IAutocompleteOptions"]},"AutocompleteOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"AutocompleteSymbol"},{"autocomplete":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{},{"__symbolic":"reference","name":"options"}]}}]}},"IChoice":{"__symbolic":"interface"},"IChoiceOptionsFormConfig":{"__symbolic":"interface"},"ChoiceOptionsSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IChoiceOptionsFormConfig"]},"ChoiceOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"ChoiceOptionsSymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{"maxChoices":1},{"renderType":"select"},{"__symbolic":"reference","name":"options"}]}]}},"OptionWrapper":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"IChoice"}]}]}},"IMultipleChoicesOptionsFormConfig":{"__symbolic":"interface"},"MultipleChoicesOptionsSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IMultipleChoicesOptionsFormConfig"]},"MultipleChoicesOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"MultipleChoicesOptionsSymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{"arrayType":"enum"},{"maxChoices":null},{"__symbolic":"reference","name":"options"}]}]}},"IFlexibleObjectArrayFormConfig":{"__symbolic":"interface"},"FlexibleObjectArraySymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IFlexibleObjectArrayFormConfig"]},"FlexibleObjectArray":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"FlexibleObjectArraySymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{"expandOptions":false},{"__symbolic":"reference","name":"options"},{"arrayType":"object"}]}]}},"IMatExtraOptionsFormConfig":{"__symbolic":"interface"},"MatExtraOptionsSymbol":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"Symbol"},"arguments":["IMatExtraOptionsFormConfig"]},"MatExtraOptions":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":[{"__symbolic":"reference","name":"MatExtraOptionsSymbol"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Object"},"member":"assign"},"arguments":[{},{"__symbolic":"reference","name":"options"}]}]}},"AttributeType":{"__symbolic":"interface"},"TypeMeta":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"error","message":"Could not resolve type","line":3,"character":33,"context":{"typeName":"AttributeType"},"module":"./lib/ObjectAttributeTypeExtractor"}]}]}},"PrimitiveTypeMeta":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"TypeMeta"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"any"}]}]}},"NonPrimitiveTypeMeta":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"TypeMeta"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"error","message":"Expression form not supported","line":30,"character":14,"module":"./lib/ObjectAttributeTypeExtractor"},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"any"}]}]}},"ExtractorResultType":{"__symbolic":"interface"},"OnOATResolved":{"__symbolic":"function","parameters":["cb"],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Reflect"},"member":"metadata"},"arguments":["OnOATResolved",{"__symbolic":"reference","name":"cb"}]}},"ObjectAttributeTypeExtractor":{"__symbolic":"class","members":{}},"MapToIterable":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":2,"character":1},"arguments":[{"name":"mapToIterable"}]}],"members":{"transform":[{"__symbolic":"method"}]}},"HbFormModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":38,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":40,"character":8},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":41,"character":8},{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule","line":44,"character":8},{"__symbolic":"reference","module":"@angular/material/autocomplete","name":"MatAutocompleteModule","line":45,"character":8},{"__symbolic":"reference","module":"@angular/material/button","name":"MatButtonModule","line":46,"character":8},{"__symbolic":"reference","module":"@angular/material/button-toggle","name":"MatButtonToggleModule","line":47,"character":8},{"__symbolic":"reference","module":"@angular/material/card","name":"MatCardModule","line":48,"character":8},{"__symbolic":"reference","module":"@angular/material/checkbox","name":"MatCheckboxModule","line":49,"character":8},{"__symbolic":"reference","module":"@angular/material/datepicker","name":"MatDatepickerModule","line":50,"character":8},{"__symbolic":"reference","module":"@angular/material/expansion","name":"MatExpansionModule","line":51,"character":8},{"__symbolic":"reference","module":"@angular/material/input","name":"MatInputModule","line":52,"character":8},{"__symbolic":"reference","module":"@angular/material/core","name":"MatNativeDateModule","line":53,"character":8},{"__symbolic":"reference","module":"@angular/material/radio","name":"MatRadioModule","line":54,"character":8},{"__symbolic":"reference","module":"@angular/material/select","name":"MatSelectModule","line":55,"character":8}],"declarations":[{"__symbolic":"reference","name":"HbFormArrayComponent"},{"__symbolic":"reference","name":"HbFormMatArrayComponent"},{"__symbolic":"reference","name":"HbFormObjectComponent"},{"__symbolic":"reference","name":"HbFormMatObjectComponent"},{"__symbolic":"reference","name":"HbFormWidgetComponent"},{"__symbolic":"reference","name":"HbFormMatWidgetComponent"},{"__symbolic":"reference","name":"MapToIterable"}],"exports":[{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule","line":59,"character":8},{"__symbolic":"reference","module":"@angular/material/autocomplete","name":"MatAutocompleteModule","line":60,"character":8},{"__symbolic":"reference","module":"@angular/material/button","name":"MatButtonModule","line":61,"character":8},{"__symbolic":"reference","module":"@angular/material/button-toggle","name":"MatButtonToggleModule","line":62,"character":8},{"__symbolic":"reference","module":"@angular/material/card","name":"MatCardModule","line":63,"character":8},{"__symbolic":"reference","module":"@angular/material/checkbox","name":"MatCheckboxModule","line":64,"character":8},{"__symbolic":"reference","module":"@angular/material/datepicker","name":"MatDatepickerModule","line":65,"character":8},{"__symbolic":"reference","module":"@angular/material/expansion","name":"MatExpansionModule","line":66,"character":8},{"__symbolic":"reference","module":"@angular/material/input","name":"MatInputModule","line":67,"character":8},{"__symbolic":"reference","module":"@angular/material/core","name":"MatNativeDateModule","line":68,"character":8},{"__symbolic":"reference","module":"@angular/material/radio","name":"MatRadioModule","line":69,"character":8},{"__symbolic":"reference","module":"@angular/material/select","name":"MatSelectModule","line":70,"character":8},{"__symbolic":"reference","name":"HbFormArrayComponent"},{"__symbolic":"reference","name":"HbFormMatArrayComponent"},{"__symbolic":"reference","name":"HbFormObjectComponent"},{"__symbolic":"reference","name":"HbFormMatObjectComponent"},{"__symbolic":"reference","name":"HbFormWidgetComponent"},{"__symbolic":"reference","name":"HbFormMatWidgetComponent"},{"__symbolic":"reference","name":"MapToIterable"}]}]}],"members":{}},"TemplateObjectType":{"__symbolic":"interface"},"ICustomComponent":{"__symbolic":"interface"},"ICustomComponentConstructor":{"__symbolic":"interface"}},"origins":{"HbFormArrayComponent":"./lib/components/hb-form-array.component","HbFormMatArrayComponent":"./lib/components/hb-form-mat-array.component","HbFormMatObjectComponent":"./lib/components/hb-form-mat-object.component","HbFormObjectComponent":"./lib/components/hb-form-object.component","HbFormWidgetComponent":"./lib/components/hb-form-widget.component","HbFormMatWidgetComponent":"./lib/components/hb-form-mat-widget.component","Ng2FormFactory":"./lib/class/Ng2FormFactory","onOATResolved":"./lib/class/NgFormFactoryDecorators","SetupConfig":"./lib/class/NgFormFactoryDecorators","RenderType":"./lib/class/decorators/FormConfig","HtmlElementAttribute":"./lib/class/decorators/FormConfig","IBaseFormConfig":"./lib/class/decorators/FormConfig","FormConfigSymbol":"./lib/class/decorators/FormConfig","FormConfig":"./lib/class/decorators/FormConfig","IArrayOptionsFormConfig":"./lib/class/decorators/ArrayOptions","ArrayOptionsSymbol":"./lib/class/decorators/ArrayOptions","ArrayOptions":"./lib/class/decorators/ArrayOptions","IObjectOptionsFormConfig":"./lib/class/decorators/ObjectOptions","ObjectOptionsSymbol":"./lib/class/decorators/ObjectOptions","ObjectOptions":"./lib/class/decorators/ObjectOptions","IAutocompleteOptions":"./lib/class/decorators/AutocompleteOptions","AutocompleteSymbol":"./lib/class/decorators/AutocompleteOptions","AutocompleteOptions":"./lib/class/decorators/AutocompleteOptions","IChoice":"./lib/class/decorators/ChoiceOptions","IChoiceOptionsFormConfig":"./lib/class/decorators/ChoiceOptions","ChoiceOptionsSymbol":"./lib/class/decorators/ChoiceOptions","ChoiceOptions":"./lib/class/decorators/ChoiceOptions","OptionWrapper":"./lib/class/decorators/MultipleChoicesOptions","IMultipleChoicesOptionsFormConfig":"./lib/class/decorators/MultipleChoicesOptions","MultipleChoicesOptionsSymbol":"./lib/class/decorators/MultipleChoicesOptions","MultipleChoicesOptions":"./lib/class/decorators/MultipleChoicesOptions","IFlexibleObjectArrayFormConfig":"./lib/class/decorators/FlexibleObjectArray","FlexibleObjectArraySymbol":"./lib/class/decorators/FlexibleObjectArray","FlexibleObjectArray":"./lib/class/decorators/FlexibleObjectArray","IMatExtraOptionsFormConfig":"./lib/class/decorators/MatExtraOptions","MatExtraOptionsSymbol":"./lib/class/decorators/MatExtraOptions","MatExtraOptions":"./lib/class/decorators/MatExtraOptions","AttributeType":"./lib/ObjectAttributeTypeExtractor","TypeMeta":"./lib/ObjectAttributeTypeExtractor","PrimitiveTypeMeta":"./lib/ObjectAttributeTypeExtractor","NonPrimitiveTypeMeta":"./lib/ObjectAttributeTypeExtractor","ExtractorResultType":"./lib/ObjectAttributeTypeExtractor","OnOATResolved":"./lib/ObjectAttributeTypeExtractor","ObjectAttributeTypeExtractor":"./lib/ObjectAttributeTypeExtractor","MapToIterable":"./lib/pipe/MapToIterable","HbFormModule":"./lib/HbFormModule","TemplateObjectType":"./lib/HbFormModule","ICustomComponent":"./lib/HbFormModule","ICustomComponentConstructor":"./lib/HbFormModule"},"importAs":"hb-ng-form"}