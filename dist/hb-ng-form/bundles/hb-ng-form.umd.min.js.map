{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://hb-ng-form/lib/components/hb-form-widget.tpl.html","ng://hb-ng-form/lib/components/hb-form-widget.component.ts","ng://hb-ng-form/lib/components/hb-form-array.tpl.html","ng://hb-ng-form/lib/components/hb-form-array.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-array.tpl.html","ng://hb-ng-form/lib/components/hb-form-mat-array.component.ts","ng://hb-ng-form/lib/components/hb-form-object.tpl.html","ng://hb-ng-form/lib/components/hb-form-object.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-object.tpl.html","ng://hb-ng-form/lib/components/hb-form-mat-object.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-widget.tpl.html","ng://hb-ng-form/lib/components/hb-form-mat-widget.component.ts","ng://hb-ng-form/lib/ObjectAttributeTypeExtractor.ts","ng://hb-ng-form/lib/class/decorators/FormConfig.ts","ng://hb-ng-form/lib/class/decorators/ArrayOptions.ts","ng://hb-ng-form/lib/class/decorators/ObjectOptions.ts","ng://hb-ng-form/lib/class/decorators/AutocompleteOptions.ts","ng://hb-ng-form/lib/class/decorators/ChoiceOptions.ts","ng://hb-ng-form/lib/class/decorators/MultipleChoicesOptions.ts","ng://hb-ng-form/lib/class/decorators/FlexibleObjectArray.ts","ng://hb-ng-form/lib/class/decorators/MatExtraOptions.ts","ng://hb-ng-form/lib/class/NgFormFactoryDecorators.ts","ng://hb-ng-form/lib/class/Ng2FormFactory.ts","ng://hb-ng-form/lib/pipe/MapToIterable.ts","ng://hb-ng-form/lib/HbFormModule.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵattribute","ctx_r4","data","html","class","label","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵlistener","control","patchValue","$event","target","i0.ɵɵproperty","undefined","ctx_r10","placeholder","i0.ɵɵelementContainerStart","i0.ɵɵtemplate","i0.ɵɵelementContainerEnd","_r11","ctx_r9","i0.ɵɵpropertyInterpolate2","ctx_r25","updateParentValue","option_r19","ctx_r21","id","ctx_r32","ctx_r29","checked","_r30","_r22","i0.ɵɵtextInterpolate1","_r16","i0.ɵɵclassMapInterpolate2","_r2","HbFormWidgetComponent","resolver","log","args","_i","console","apply","ngAfterViewInit","hide","useComponent","factory","resolveComponentFactory","ref","customBlock","createComponent","instance","templateObject","parentTemplateObject","parent","changeDetectorRef","detectChanges","isOptionSelectingComponent","indexOf","renderType","ngOnInit","result","resolved_1","options","type","name","Error","key","diContainer","Observable","complete","resolvedOptions","stringToBoolean","val","option","source","isChecked","parentControls","controls","add","setValue","remove","typeof","input","slugifyString","slugMap","toLowerCase","replace","core","ɵɵdirectiveInject","ComponentFactoryResolver","selectors","viewQuery","rf","ctx","ViewContainerRef","ɵɵpureFunction0","_c0$1","ctx_r19","i0.ɵɵclassMapInterpolate1","_r6","i0.ɵɵelement","i_r22","ctx_r23","ctx_r30","each_r28","ctx_r31","i0.ɵɵclassMapInterpolate3","ɵɵpureFunction1","_c1$1","ctx_r0","hints","HbFormArrayComponent","_super","inputs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","_c0$2","ctx_r20","_r7","i_r23","ctx_r24","each_r29","ctx_r33","_c1$2","HbFormMatArrayComponent","each_r4","ctx_r6","ctx_r7","ctx_r8","ɵɵpureFunction2","_c0$3","valid","HbFormObjectComponent","_c0$4","HbFormMatObjectComponent","i0.ɵɵpropertyInterpolate","ctx_r15","_r8","option_r30","ctx_r36","option_r37","_r34","_r27","ctx_r42","_r24","HbFormMatWidgetComponent","arrayType","TypeMeta","_type","defineProperty","PrimitiveTypeMeta","_value","_this","NonPrimitiveTypeMeta","_mapping","OnOATResolved","cb","Reflect","metadata","ObjectAttributeTypeExtractor","generateMapping","assign","keyNamingStrategy","stripUnderscore","mapping","Extractor","resolvedMeta","generateObjectTypeMapping","hasMetadata","getMetadata","onResolved","resolveAttributeKey","Date","object","setterKey","charAt","trimmedKey","substr","convertStringToSnakeCase","fixNamingConvention","forEach","obj","finalKey","convertDataToString","callbacks","date","Function","yyyymmdd","FormConfigSymbol","ArrayOptionsSymbol","ObjectOptionsSymbol","AutocompleteSymbol","ChoiceOptionsSymbol","FormControl","MultipleChoicesOptionsSymbol","FlexibleObjectArraySymbol","MatExtraOptionsSymbol","onOATResolved","resolved","formFactory","eachSymbol","getMetadataArgs","Ng2FormFactory","generateFormGroupByObject","formBuilder","resolveTypeAny","generateFormGroupByOATMapping","generateLabel","fixedKey","toUpperCase","slice","attributeMappingObject","resolveTypeUndefined","ngFormControl","templateConfig","isNonPrimitiveType","attrMapping","currentTemplateConfig","current","handleArray","child","prepareAndCreateChildTemplateConfig","groupType","FormGroup","resolveFormValidators","validators","children","_a","valueNotEmpty","factorySetValueFunctionToTemplate","resolveTemplateConfigByType","setTemplatePreset","Validators","required","currentInput","isRaw","schemaTemp","onCreate","ngFormArrayControl","FormArray","initChildren","childrenConfigName","useConfig","objectDefinitions","i_1","each","structure","childConfig","flexibleObjectTypeName","onPush","removeAt","splice","rawValue","targetTemplate","beforeSetValue","afterSetValue","i_2","resolveFlexibleObjectArrayConfig","fixForPrimitiveArray","templateObj","expandOptions","maxChoices","Map","MapToIterable","transform","_b","keys","_c","pure","HbFormModule","imports","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatDatepickerModule","MatExpansionModule","MatInputModule","MatNativeDateModule","MatRadioModule","MatSelectModule","declarations","exports","forms","ɵangular_packages_forms_forms_y","NgSelectOption","ɵangular_packages_forms_forms_x","DefaultValueAccessor","NumberValueAccessor","RangeValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","SelectMultipleControlValueAccessor","RadioControlValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","MinLengthValidator","MaxLengthValidator","PatternValidator","CheckboxRequiredValidator","EmailValidator","NgModel","NgModelGroup","NgForm","FormControlDirective","FormGroupDirective","FormControlName","FormGroupName","FormArrayName","common","NgClass","NgComponentOutlet","NgForOf","NgIf","NgTemplateOutlet","NgStyle","NgSwitch","NgSwitchCase","NgSwitchDefault","NgPlural","NgPluralCase","scrolling","CdkScrollable","autocomplete","MatAutocomplete","core$1","MatOption","MatOptgroup","MatAutocompleteTrigger","MatAutocompleteOrigin","bidi","Dir","button","MatButton","MatAnchor","buttonToggle","MatButtonToggleGroup","MatButtonToggle","card","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","checkbox","MatCheckbox","MatCheckboxRequiredValidator","datepicker","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatDatepickerInput","MatDatepickerToggle","MatDatepickerToggleIcon","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","expansion","MatAccordion","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","textField","CdkAutofill","CdkTextareaAutosize","formField","MatError","MatFormField","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatInput","MatTextareaAutosize","radio","MatRadioGroup","MatRadioButton","select","MatSelect","MatSelectTrigger","AsyncPipe","UpperCasePipe","LowerCasePipe","JsonPipe","SlicePipe","DecimalPipe","PercentPipe","TitleCasePipe","CurrencyPipe","DatePipe","I18nPluralPipe","I18nSelectPipe","KeyValuePipe","slug","hiderHeader"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","<div *ngIf=\"\n         data.control != undefined &&\n         (\n             data.groupType == undefined ||\n             parent.arrayType == 'enum'\n         ) &&\n         key != 'setValue' &&\n         (\n             data.hide == undefined ||\n             !data.hide\n         )\n    \"\n    [ngClass]=\"{\n        'error': !data.control.valid,\n        'hb-form-with-hints' : data.hints\n    }\"\n    class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }} {{ data?.html?.classAttr }}\"\n>\n    <ng-container *ngIf=\"!data.useComponent; else customBlock\">\n        <label *ngIf=\"data.label\"\n               [attr.for]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\"\n               [attr.class]=\"data?.html?.class?.label\">{{ data.label }}</label>\n\n        <ng-container *ngIf=\"parent?.arrayType !== 'enum'\">\n            <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n                <div *ngIf=\"data.selectOptionsObservables == undefined; else autocompleteBlock\"\n                     class=\"hb-form-widget-input-field\">\n                    <input [attr.id]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           (change)=\"data.control.patchValue($event.target.value)\"\n                           [placeholder]=\"data.placeholder !== undefined ? data.placeholder : ''\"\n                           [formControl]=\"data.control\" />\n                </div>\n\n                <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n<!--                        Autocomplete is not well supported in hb-form-widget-->\n\n<!--                        <div *ngIf=\"data.autocomplete.renderType != 'custom'; else autocompleteCustomizeBlock\" -->\n<!--                             class=\"hb-form-widget-input-field autocomplete\">-->\n<!--                            <input [attr.id]=\"key ? key : data.slug + '-input'\"-->\n<!--                                   [type]=\"data.renderType ? data.renderType : 'text'\"-->\n<!--                                   (change)=\"data.control.patchValue($event.target.value)\"-->\n<!--                                   [placeholder]=\"data.label !== undefined ? data.label : data.option.name\"-->\n<!--                                   [formControl]=\"data.control\" />-->\n\n<!--                            <autocomplete #auto=\"matAutocomplete\">-->\n<!--                                <option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">-->\n<!--                                    <span>{{ option.label }}</span>-->\n<!--                                </option>-->\n<!--                            </autocomplete>-->\n\n<!--                            <span class=\"hints\" *ngIf=\"data?.hints\">-->\n<!--                                {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}-->\n<!--                            </span>-->\n<!--                        </div>-->\n                </ng-template>\n            </ng-container>\n\n            <ng-container *ngIf=\"data.renderType == 'textarea'\">\n                <textarea [rows]=\"data?.html?.textarea?.row || 5\" [formControl]=\"data.control\"\n                          [attr.id]=\"'hb-form-widget_' + (key ? key : data.slug) +'-input'\">\n                </textarea>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isOptionSelectingComponent()\">\n\n            <ng-container *ngIf=\"data.renderType != 'select'; else selectBlock\">\n                <ng-container *ngFor=\"let option of resolvedOptions | async\">\n                    <label *ngIf=\"parent?.arrayType == 'enum' || data.renderType != 'checkbox'\"\n                           for=\"hb-form-widget_{{ key ? key : data.slug }}-input__{{ slugifyString(option.name) }}\">{{ option.name }}</label>\n\n                    <ng-container *ngIf=\"data.renderType == 'radio'; else checkBoxBlock\">\n                        <input type=\"radio\"\n                               id=\"hb-form-widget_{{ key ? key : data.slug }}-input__{{ slugifyString(option.name) }}\"\n                               class=\"example-radio-button\"\n                               [value]=\"option.value\"\n                               [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                               [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.slug) + '-input' : null\"\n                               (select)=\"parent?.arrayType == 'enum' ? updateParentValue($event, option) : data.control.patchValue($event.target.value)\"\n                               [formControl]=\"data.control\"\n                        />\n                    </ng-container>\n\n                    <ng-template #checkBoxBlock>\n                        <ng-container *ngIf=\"parent?.arrayType == 'enum'; else booleanCheckBoxBlock\">\n                            <input type=\"checkbox\"\n                                   [value]=\"option.value\"\n                                   [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                                   (change)=\"parent?.arrayType == 'enum' ? updateParentValue($event, option) : data.control.patchValue($event.target.value)\"\n                                   [formControl]=\"data.control\"/>\n                        </ng-container>\n\n                        <ng-template #booleanCheckBoxBlock>\n                            <input type=\"checkbox\"\n                                   [checked]=\"data.control.value ? true : null\"\n                                   (change)=\"data.control.patchValue($event.target.checked)\"/>\n                        </ng-template>\n                    </ng-template>\n                </ng-container>\n            </ng-container>\n\n            <ng-template #selectBlock>\n                <select *ngIf=\"data.renderType == 'select'\"\n                        [formControl]=\"data.control\"\n                        [attr.placeholder]=\"data.label != undefined ? data.label : ''\"\n                >\n                    <option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </option>\n                </select>\n            </ng-template>\n        </ng-container>\n\n        <span class=\"hints\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n        </span>\n    </ng-container>\n\n    <ng-template #customBlock></ng-template>\n</div>\n","import {\n    Component,\n    OnInit,\n    ComponentFactoryResolver,\n    ViewChild,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { IMultipleChoicesOptionsFormConfig } from \"../class/decorators/MultipleChoicesOptions\";\nimport { IBaseFormConfig } from \"../class/decorators/FormConfig\";\nimport { IArrayOptionsFormConfig } from \"../class/decorators/ArrayOptions\";\nimport { IObjectOptionsFormConfig } from \"../class/decorators/ObjectOptions\";\nimport { IChoiceOptionsFormConfig } from \"../class/decorators/ChoiceOptions\";\n\n@Component({\n    selector: 'hb-form-widget',\n    templateUrl: './hb-form-widget.tpl.html',\n    inputs: ['data', 'key', 'parent']\n})\nexport class HbFormWidgetComponent implements OnInit {\n    public resolvedOptions;\n    public key;\n    public data: any & IBaseFormConfig & IMultipleChoicesOptionsFormConfig & IArrayOptionsFormConfig & IObjectOptionsFormConfig & IChoiceOptionsFormConfig;\n    public parent;\n    static slugMap = [];\n\n    @ViewChild(\"customBlock\", { read: ViewContainerRef, static: true }) customBlock;\n\n    constructor(\n        private resolver: ComponentFactoryResolver\n    ) {\n    }\n\n    log(...args) {\n        console.log(...args);\n    }\n\n    ngAfterViewInit() {\n        if (!this.data.hide && this.data.useComponent) {\n            const factory = this.resolver.resolveComponentFactory(\n                this.data.useComponent\n            );\n            const ref = this.customBlock.createComponent(factory);\n            ref.instance.templateObject = this.data;\n            ref.instance.parentTemplateObject = this.parent;\n\n            ref.changeDetectorRef.detectChanges();\n        }\n    }\n\n    isOptionSelectingComponent() {\n        return ['radio', 'checkbox', 'select'].indexOf(this.data.renderType) > -1;\n    }\n\n    ngOnInit() {\n        if (this.isOptionSelectingComponent()) {\n            let data = this.data;\n\n            let result = null;\n            let resolved = null;\n\n            let options: any = [];\n            if (\n                data.options && (\n                    data.options.length ||\n                    typeof data.options === 'function'\n                )\n            ) {\n                options = data.options\n            } else if (\n                data.type === 'boolean' &&\n                data.renderType === 'checkbox'\n            ) {\n                options = [{\n                    name: data.label,\n                    value: true,\n                }];\n            }\n\n            if (options.length === 0) {\n                throw new Error('No options set for ' + data.key + ' in ' + this.parent.key);\n            }\n\n            if (typeof options === 'function') {\n                resolved = options(data.diContainer, this.data, this.parent);\n            } else if (!(result instanceof Observable)) {\n                resolved = options;\n            }\n\n            result = resolved;\n\n            if (!(resolved instanceof Observable)) {\n                result = new Observable((o) => {\n                    o.next(resolved);\n                    o.complete();\n                });\n            }\n\n            this.resolvedOptions = result;\n        }\n    }\n\n    stringToBoolean(val) {\n        return val === 'true'\n    }\n\n    updateParentValue($event, option) {\n        const target = $event.target ? $event.target : $event.source;\n        let isChecked = target.checked;\n\n        switch (this.data.renderType) {\n            case 'checkbox':\n                let parentControls = this.parent.control.controls;\n\n                if (isChecked) {\n                    this.parent.add();\n\n                    parentControls[parentControls.length - 1].setValue(option.value);\n                } else {\n                    let i = 0;\n\n                    for (; i < parentControls.length; i++) {\n                        if (parentControls[i].value == option.value) break;\n                    }\n\n                    this.parent.remove(i);\n                }\n\n                break;\n\n            case 'radio':\n                if (isChecked) this.data.control.patchValue(target.value);\n\n                break;\n        }\n    }\n\n    typeof(input) {\n        return typeof input;\n    }\n\n    slugifyString(input: string) {\n        if (input in HbFormWidgetComponent.slugMap) {\n            return HbFormWidgetComponent.slugMap[input];\n        }\n\n        if (input) {\n            return HbFormWidgetComponent.slugMap[input] = input\n                .toLowerCase()\n                .replace(/[^\\w\\s-]/g, '')\n                .replace(/[\\s_-]+/g, '-')\n                .replace(/^-+|-+$/g, '');\n        } else {\n            throw new Error('Cannot slugify input, input is undefined.')\n        }\n    }\n}\n","<div [attr.id]=\"data.id\"\n     class=\"hb-form-array {{ data.arrayType }} hb-form-array_{{ key }} {{ data?.html?.classAttr }}\"\n     *ngIf=\"\n         data.control != undefined &&\n         key != 'setValue' && (\n             data.hide == undefined ||\n             !data.hide\n         )\n     \"\n     [formGroup]=\"data.control\"\n     [ngClass]=\"{\n         'hb-form-with-hints' : data.hints\n     }\"\n>\n    <header>\n        <h2 *ngIf=\"!data.hideHeader\">{{ data.label }}</h2>\n\n        <ng-container *ngIf=\"data.childrenConfigName.length > 0\">\n            <ng-container *ngIf=\"!data.expandOptions; else expandedArrayPushOptions\">\n                <select class=\"hb-form-array-config-switch\"\n                        [(ngModel)]=\"data.useConfig\" [ngModelOptions]=\"{standalone: true}\">\n                    <option *ngFor=\"let configName of data.childrenConfigName; let i = index\" [value]=\"i\">\n                        {{ configName }}\n                    </option>\n                </select>\n\n                <button class=\"btn btn-default hb-form-add-btn\" type=\"button\" *ngIf=\"data.arrayType != 'enum'\" (click)=\"data.add()\">Add</button>\n            </ng-container>\n\n            <ng-template #expandedArrayPushOptions>\n                <button type=\"button\"\n                        class=\"btn btn-default hb-form-add-btn hb-form-add-btn-expanded-{{ i }}\"\n                        *ngFor=\"let configName of data.childrenConfigName; let i = index\"\n                        (click)=\"data.useConfig = i; data.add();\">\n                    &#x253C; {{ configName }}\n                </button>\n            </ng-template>\n        </ng-container>\n    </header>\n\n    <div [attr.id]=\"data.id ? (data.id + '_' + i) : null\"\n         class=\"hb-form-array-cell hb-form-array-cell_{{ cell?.flexibleObjectTypeName?.toLowerCase() }} {{ cell?.html?.classAttr }}\"\n         *ngFor=\"let cell of (data.arrayType != 'enum' ? data.children : resolvedOptions | async); let i=index\">\n        <hb-form-widget *ngIf=\"data.arrayType == 'enum'\"\n                        [data]=\"cell\"\n                        [key]=\"i\"\n                        [parent]=\"data\"></hb-form-widget>\n\n        <ng-container *ngIf=\"data.arrayType != 'enum'\">\n            <div *ngFor=\"let each of cell.children | mapToIterable;\"\n                 class=\"panel panel-default hb-form-array-cell-attr_{{ each.key }}\">\n                <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                    <hb-form-widget *ngIf=\"each.val.groupType == undefined\"\n                                    [data]=\"each.val\"\n                                    [key]=\"i\"\n                                    [parent]=\"data\"></hb-form-widget>\n                    <hb-form-array *ngIf=\"each.val?.groupType == 'array'\"\n                                   [data]=\"each.val\"\n                                   [key]=\"each.key\"\n                                   [parent]=\"data\"></hb-form-array>\n                    <hb-form-object *ngIf=\"each.val?.groupType == 'object'\"\n                                    [data]=\"each.val\"\n                                    [key]=\"each.key\"\n                                    [parent]=\"data\"></hb-form-object>\n                </ng-container>\n            </div>\n        </ng-container>\n\n        <button class=\"btn btn-default hb-form-remove-btn\"\n                type=\"button\"\n                *ngIf=\"data.arrayType != 'enum'\"\n                (click)=\"data.remove(i)\">\n            &#x2715;\n        </button>\n    </div>\n\n    <div class=\"hints\" *ngIf=\"data?.hints\">\n        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n    </div>\n</div>\n","import { Component } from \"@angular/core\";\nimport { HbFormWidgetComponent } from './hb-form-widget.component';\n\n@Component({\n    selector: 'hb-form-array',\n    templateUrl: './hb-form-array.tpl.html',\n    inputs: ['key', 'data', 'parent']\n})\nexport class HbFormArrayComponent extends HbFormWidgetComponent {\n}\n","<mat-card class=\"hb-form-array hb-array-type_{{ data.arrayType }} hb-form-array_{{ key }} {{ data?.html?.classAttr }}\"\n          [attr.id]=\"data.id\"\n          *ngIf=\"\n              data.control != undefined &&\n              key != 'setValue' && (\n                  data.hide == undefined ||\n                  !data.hide\n              )\n          \"\n          [formGroup]=\"data.control\"\n          [ngClass]=\"{\n              'hb-form-with-hints' : data.hints\n          }\">\n    <mat-card-header>\n        <mat-card-title *ngIf=\"!data.hideHeader\">\n            <h2 *ngIf=\"data.label != ''\">{{ data.label }}</h2>\n\n            <ng-container *ngIf=\"data.childrenConfigName.length > 0\">\n                <ng-container *ngIf=\"!data.expandOptions; else expandedArrayPushOptions\">\n                    <mat-form-field>\n                        <mat-select class=\"hb-form-array-config-switch\"\n                                    [(ngModel)]=\"data.useConfig\"\n                                    [ngModelOptions]=\"{standalone: true}\">\n                            <mat-option *ngFor=\"let configName of data.childrenConfigName; let i = index\" [value]=\"i\">\n                                {{ configName }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n\n                    <button mat-raised-button\n                            type=\"button\"\n                            class=\"btn btn-default hb-form-add-btn\"\n                            *ngIf=\"data.arrayType != 'enum'\"\n                            (click)=\"data.add()\"\n                    >\n                        Add\n                    </button>\n                </ng-container>\n\n                <ng-template #expandedArrayPushOptions>\n                    <button mat-raised-button\n                            type=\"button\"\n                            *ngFor=\"let configName of data.childrenConfigName; let i = index\"\n                            (click)=\"data.useConfig = i; data.add();\">\n                        &#x253C; {{ configName }}\n                    </button>\n                </ng-template>\n            </ng-container>\n        </mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content>\n        <div [attr.id]=\"data.id + '-' + i\"\n             class=\"hb-form-array-cell hb-form-array-cell_{{ cell?.flexibleObjectTypeName?.toLowerCase() }} {{ cell?.html?.classAttr }}\"\n             *ngFor=\"\n                 let cell of data.arrayType != 'enum' ?\n                     data.children : resolvedOptions | async\n                 ; let i=index\n             \">\n            <hb-mat-form-widget *ngIf=\"data.arrayType == 'enum'\" [data]=\"cell\" [key]=\"i\" [parent]=\"data\"></hb-mat-form-widget>\n\n            <ng-container *ngIf=\"data.arrayType != 'enum'\">\n                <div *ngFor=\"let each of cell.children | mapToIterable;\"\n                     class=\"hb-form-array-cell-attr_{{ each.key }}\">\n                    <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                        <hb-mat-form-widget *ngIf=\"each.val.groupType == undefined\" [data]=\"each.val\" [key]=\"i\" [parent]=\"data\">\n                        </hb-mat-form-widget>\n                        <hb-mat-form-array *ngIf=\"each.val?.groupType == 'array'\" [data]=\"each.val\" [key]=\"each.key\" [parent]=\"data\">\n                        </hb-mat-form-array>\n                        <hb-mat-form-object *ngIf=\"each.val?.groupType == 'object'\" [data]=\"each.val\" [key]=\"each.key\" [parent]=\"data\">\n                        </hb-mat-form-object>\n                    </ng-container>\n                </div>\n            </ng-container>\n\n            <button mat-mini-fab color=\"primary\" class=\"hb-form-remove-btn\" type=\"button\"\n                    *ngIf=\"data.arrayType != 'enum'\"\n                    (click)=\"data.remove(i)\">\n                &#x2715;\n            </button>\n        </div>\n\n        <strong class=\"mat-hint\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </strong>\n    </mat-card-content>\n</mat-card>\n","import { Component } from \"@angular/core\";\nimport { HbFormArrayComponent } from \"./hb-form-array.component\";\n\n@Component({\n    selector: 'hb-mat-form-array',\n    templateUrl: './hb-form-mat-array.tpl.html',\n    inputs: ['key', 'data', 'parent']\n})\nexport class HbFormMatArrayComponent extends HbFormArrayComponent {\n}\n","<div *ngIf=\"\n        data.control != undefined &&\n        key != 'setValue' && (\n            data.hide == undefined ||\n            !data.hide\n        )\n    \"\n     [formGroup]=\"data.control\"\n     [ngClass]=\"{\n         'error': !data.control.valid,\n         'hb-form-with-hints' : data.hints\n     }\"\n     class=\"form-object {{ data?.html?.classAttr }} hb-form-obj_{{ key }}\"\n>\n    <h2 *ngIf=\"typeof(data.label) == 'string' && data.label != '' && !data.hideHeader\">\n        {{ data.label }}\n    </h2>\n\n    <div class=\"hb-form-object-content\">\n        <div *ngFor=\"let each of data.children | mapToIterable\" class=\"hb-form-obj-attr_{{ each.key }}\">\n            <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                <hb-form-widget\n                    *ngIf=\"each.val.groupType == undefined && each.key != 'setValue'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-widget>\n                <hb-form-array\n                    *ngIf=\"each.val?.groupType == 'array'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [formArrayName]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-array>\n                <hb-form-object\n                    *ngIf=\"each.val?.groupType == 'object' && each.key != 'setValue'\"\n                    [data]=\"each.val\"\n                    [key]=\"each.key\"\n                    [parent]=\"data\"\n                ></hb-form-object>\n            </ng-container>\n        </div>\n\n        <span class=\"hints\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </span>\n    </div>\n</div>\n","import { Component } from \"@angular/core\";\nimport { HbFormWidgetComponent } from './hb-form-widget.component';\n\n@Component({\n    selector: 'hb-form-object',\n    templateUrl:  './hb-form-object.tpl.html',\n    inputs: ['id', 'key', 'data', 'parent']\n})\nexport class HbFormObjectComponent extends HbFormWidgetComponent {\n}\n","<mat-card *ngIf=\"\n    data.control != undefined &&\n    key != 'setValue' && (\n        data.hide == undefined ||\n        !data.hide\n    )\"\n          [formGroup]=\"data.control\"\n          [ngClass]=\"{\n        'error': !data.control.valid,\n        'hb-form-with-hints' : data.hints\n    }\"\n          class=\"form-object {{ data?.html?.classAttr }} hb-form-obj_{{ key }}\">\n    <mat-card-header *ngIf=\"typeof(data.label) == 'string' && data.label != '' && !data.hideHeader\">\n        <mat-card-title>\n            {{ data.label }}\n        </mat-card-title>\n    </mat-card-header>\n    <mat-card-content class=\"hb-form-object-content\">\n        <div *ngFor=\"let each of data.children | mapToIterable\" class=\"hb-form-obj-attr_{{ each.key }}\">\n            <ng-container *ngIf=\"!each.hide && each.key != 'setValue'\">\n                <hb-mat-form-widget\n                        *ngIf=\"each.val.groupType == undefined && each.key != 'setValue'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-widget>\n                <hb-mat-form-array\n                        *ngIf=\"each.val?.groupType == 'array'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [formArrayName]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-array>\n                <hb-mat-form-object\n                        *ngIf=\"each.val?.groupType == 'object' && each.key != 'setValue'\"\n                        [data]=\"each.val\"\n                        [key]=\"each.key\"\n                        [parent]=\"data\">\n                </hb-mat-form-object>\n            </ng-container>\n        </div>\n        <strong class=\"mat-hint\" *ngIf=\"data?.hints\">\n            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n        </strong>\n    </mat-card-content>\n</mat-card>\n","import { Component } from \"@angular/core\";\nimport { HbFormObjectComponent } from \"./hb-form-object.component\";\n\n@Component({\n    selector: 'hb-mat-form-object',\n    templateUrl:  './hb-form-mat-object.tpl.html',\n    inputs: ['id', 'key', 'data', 'parent']\n})\nexport class HbFormMatObjectComponent extends HbFormObjectComponent {\n}\n","<div *ngIf=\"\n         data.control != undefined &&\n         (\n             data.groupType == undefined ||\n             parent.arrayType == 'enum'\n         ) &&\n         key != 'setValue' &&\n         (\n             data.hide == undefined ||\n             !data.hide\n         )\n     \"\n     [ngClass]=\"{\n         'error': !data.control.valid,\n         'hb-form-with-hints' : data.hints\n     }\"\n     class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }} {{ data?.html?.classAttr }}\"\n>\n    <ng-template #customBlock></ng-template>\n\n    <ng-container *ngIf=\"\n        !data.useComponent &&\n        parent?.arrayType !== 'enum'\n    \">\n        <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n            <mat-form-field *ngIf=\"data.selectOptionsObservables == undefined; else autocompleteBlock\" class=\"hb-form-widget-input-field\">\n                <div class=\"form-field-prefix\"\n                     matPrefix\n                     *ngIf=\"data?.matExtra?.matPrefix\"\n                     [innerHtml]=\"data.matExtra.matPrefix\"\n                ></div>\n\n                <input matInput\n                       [attr.id]=\"(key ? key : data.slug) + '-input'\"\n                       [type]=\"data.renderType ? data.renderType : 'text'\"\n                       (change)=\"data.control.patchValue($event.target.value)\"\n                       [placeholder]=\"data.label !== undefined ? data.label : null\"\n                       [formControl]=\"data.control\" />\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n\n                <div class=\"form-field-suffix\"\n                     matSuffix\n                     *ngIf=\"data?.matExtra?.matSuffix\"\n                     [innerHtml]=\"data.matExtra.matSuffix\"></div>\n            </mat-form-field>\n\n            <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n                <mat-form-field *ngIf=\"data.autocomplete.renderType != 'custom';\">\n<!--                  else autocompleteCustomizeBlock-->\n                    <input matInput\n                           [attr.id]=\"key ? key : data.slug + '-input'\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           (change)=\"data.control.patchValue($event.target.value);\"\n                           placeholder=\"{{ data.label !== undefined ? data.label : data.option.name }}\"\n                           [formControl]=\"data.control\"\n                           [matAutocomplete]=\"auto\" />\n\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">\n                            <span>{{ option.label }}</span>\n                        </mat-option>\n                    </mat-autocomplete>\n\n                    <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                        <strong>\n                            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                        </strong>\n                    </mat-hint>\n                </mat-form-field>\n            </ng-template>\n        </ng-container>\n\n        <mat-form-field *ngIf=\"data.renderType === 'textarea'\">\n            <textarea matInput rows=\"5\" [formControl]=\"data.control\"\n                      [placeholder]=\"data.label ? data.label : data.option.name\"\n                      [attr.id]=\"key ? key : data.slug + '-input'\">\n            </textarea>\n\n            <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                <strong>\n                    {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                </strong>\n            </mat-hint>\n        </mat-form-field>\n    </ng-container>\n\n    <ng-container *ngIf=\"!data.useComponent && ['radio', 'checkbox', 'select'].indexOf(data.renderType) > -1\">\n        <div *ngIf=\"data.renderType != 'select'; else selectBlock\">\n            <mat-radio-group *ngIf=\"data.renderType == 'radio'; else checkBoxBlock\" [formControl]=\"data.control\">\n                <mat-radio-button\n                    class=\"example-radio-button\"\n                    *ngFor=\"let option of data.options\"\n                    [value]=\"option.value\"\n                    [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                    [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.slug) + '-input' : null\"\n                    (change)=\"updateParentValue($event, option)\"\n                >\n                    {{ option.name }}\n                </mat-radio-button>\n            </mat-radio-group>\n\n            <ng-template #checkBoxBlock>\n                <ng-container *ngIf=\"parent?.arrayType == 'enum'; else booleanCheckboxBlock\">\n                    <mat-checkbox\n                        *ngFor=\"let option of data.options\"\n                        [value]=\"option.value\"\n                        [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                        (change)=\"updateParentValue($event, option)\"\n                        [formControl]=\"data.control\"\n                    >\n                        {{ option.name }}\n                    </mat-checkbox>\n                </ng-container>\n\n                <ng-template #booleanCheckboxBlock>\n                    <label>{{ data.label }}</label>\n                    <mat-checkbox [checked]=\"data.control.value ? true : null\"\n                                  (change)=\"data.control.patchValue($event.source.checked)\">\n                    </mat-checkbox>\n                </ng-template>\n            </ng-template>\n        </div>\n\n        <ng-template #selectBlock>\n            <mat-form-field>\n                <mat-select\n                    *ngIf=\"data.renderType == 'select'\"\n                    [formControl]=\"data.control\"\n                    [placeholder]=\"data.label != undefined ? data.label : null\"\n                >\n                    <mat-option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </mat-option>\n                </mat-select>\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n            </mat-form-field>\n        </ng-template>\n    </ng-container>\n</div>\n","import { HbFormWidgetComponent } from \"./hb-form-widget.component\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'hb-mat-form-widget',\n    templateUrl: './hb-form-mat-widget.tpl.html',\n    inputs: ['data', 'key', 'parent']\n})\nexport class HbFormMatWidgetComponent extends HbFormWidgetComponent implements OnInit {\n    ngOnInit() {\n        super.ngOnInit();\n\n        if (\n            this.parent.arrayType == 'enum' &&\n            this.parent.control.value.indexOf(this.data.options[0].value) > -1\n        ) {\n            this.data.control.setValue(\n                this.data.options[0].value\n            )\n        }\n    }\n}\n","export type AttributeType = 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object' | 'any';\n\nexport class TypeMeta {\n    constructor(protected _type: AttributeType) {}\n\n    get type(): AttributeType {\n        return this._type;\n    }\n}\n\nexport class PrimitiveTypeMeta extends TypeMeta {\n    constructor(\n        protected _value: any\n    ) {\n        super(\n            <AttributeType>([\n                'string',\n                'number',\n                'boolean'\n            ].indexOf(typeof _value) > -1 ? typeof _value : 'any')\n        );\n    }\n\n    get value(): any {\n        return this._value;\n    }\n}\n\nexport class NonPrimitiveTypeMeta extends TypeMeta {\n    constructor(\n        type: 'object' | 'array' | 'date',\n        private _mapping: any = null, // All attributes should be type of ExtractorResultType\n        private _value: any = null\n    ) {\n        super(type);\n    }\n\n    get mapping(): ExtractorResultType {\n        return this._mapping;\n    }\n\n    get value(): any {\n        return this._value;\n    }\n}\n\nexport type ExtractorResultType = NonPrimitiveTypeMeta | PrimitiveTypeMeta;\n\nconst OnOATResolvedSymbol = 'OnOATResolved';\n\nexport function OnOATResolved(cb: (target: any, key: string, resolved: any) => void) {\n    return Reflect.metadata(OnOATResolvedSymbol, cb);\n}\n\nexport class ObjectAttributeTypeExtractor {\n    static generateMapping(\n        input: any,\n        options: {\n            keyNamingStrategy?: 'camelCase' | 'snake_case',\n            stripUnderscore?: boolean,\n            onResolved?: (target: any, key?: string, resolved?: any) => void\n        } = {}\n    ): any {\n        options = Object.assign({\n            keyNamingStrategy: 'camelCase',\n            stripUnderscore: false\n        }, options);\n\n        let mapping: any = {};\n        let result: any = null;\n\n        // input is an array, analyze the first cell only\n        if (input instanceof Array) {\n            mapping = new NonPrimitiveTypeMeta(\n                'array',\n                Extractor.generateMapping(input[0], options)\n            );\n        } else {\n            // Analyze attributes inside input object\n            for (let key in input) {\n                if (typeof input[key] !== 'function') {\n                    let resolvedMeta: any = {};\n\n                    // Array or Object\n                    if (typeof input[key] === 'object') {\n                        resolvedMeta = Extractor.generateObjectTypeMapping(input, key, options);\n\n                    // Any primitive type\n                    } else if (typeof input[key] !== 'function') {\n                        resolvedMeta = new PrimitiveTypeMeta(input[key]);\n                    }\n\n                    if (Reflect.hasMetadata(OnOATResolvedSymbol, input, key)) {\n                        Reflect.getMetadata(\n                            OnOATResolvedSymbol, input, key\n                        )(\n                            input, key, resolvedMeta\n                        );\n                    } else if (typeof options.onResolved === 'function') {\n                        options.onResolved(input, key, resolvedMeta);\n                    }\n\n                    // Finished, set resolved attribute metadata to result\n                    mapping[\n                        Extractor.resolveAttributeKey(options, key, input)\n                    ] = resolvedMeta;\n                }\n            }\n        }\n\n        if (\n            typeof input === 'object'\n        ) {\n            if (!(input instanceof Date) && !(input instanceof Array)) {\n                result = new NonPrimitiveTypeMeta('object', mapping);\n            } else {\n                result = mapping;\n            }\n        } else {\n            result = { mapping };\n        }\n\n        if (Reflect.hasMetadata(OnOATResolvedSymbol, input.constructor)) {\n            Reflect.getMetadata(\n                OnOATResolvedSymbol, input.constructor\n            )(\n                input.constructor, null, result\n            );\n        } else if (typeof options.onResolved === 'function') {\n            options.onResolved(input, null, result);\n        }\n\n        return result\n    }\n\n    static generateObjectTypeMapping(object: any, key, options: any) {\n        let resolvedMeta = null;\n\n        // Mark type as any if value is null\n        if (object[key] === null) {\n            resolvedMeta = new PrimitiveTypeMeta(null);\n\n        // For Array\n        } else if (object[key] instanceof Array) {\n            let target = object[key];\n            // For Primitive Array\n            if (typeof target[0] !== 'object') {\n                resolvedMeta = new NonPrimitiveTypeMeta('array', new PrimitiveTypeMeta(target[0]));\n            // For Object Array\n            } else {\n                resolvedMeta = Extractor.generateMapping(target, options);\n            }\n\n        // For Date\n        } else if (object[key] instanceof Date) {\n            resolvedMeta = new NonPrimitiveTypeMeta('date', null, object[key]);\n\n        // For Object\n        } else {\n            resolvedMeta = Extractor.generateMapping(object[key], options);\n        }\n\n        return resolvedMeta;\n    }\n\n    static resolveAttributeKey(options: any, key, object: any) {\n        let setterKey = key;\n\n        // if set function exists, rename _attr to attr\n        if (options.stripUnderscore && key.charAt(0) === '_') {\n            let trimmedKey = key.substr(1, key.length);\n\n            if (trimmedKey in object) {\n                setterKey = trimmedKey;\n            }\n        }\n\n        // Some serializer serialize data with snake_case\n        // but JS Entity Classes name attributes with camelCase\n        if (options.keyNamingStrategy === 'snake_case') {\n            setterKey = Extractor.convertStringToSnakeCase(setterKey);\n        }\n\n        return setterKey;\n    }\n\n    // For naming convention changing. Not really related to this extractor\n    static fixNamingConvention(data: any, options: any) {\n        let result = null;\n        options = Object.assign({\n            keyNamingStrategy: 'camelCase',\n            stripUnderscore: false\n        }, options);\n\n        if (data instanceof Array) {\n            result = [];\n\n            data.forEach(function (obj) {\n                result.push(Extractor.fixNamingConvention(obj, options));\n            });\n        } else if (typeof data === 'object') {\n            result = {};\n\n            for (let key in data) {\n                if (!options.stripUnderscore || key.charAt(0) !== '_') {\n                    let finalKey = key;\n\n                    if (options.keyNamingStrategy === 'snake_case') {\n                        finalKey = Extractor.convertStringToSnakeCase(key);\n                    }\n\n                    if (typeof data[key] === 'object') {\n                        result[finalKey] = Extractor.fixNamingConvention(data[key], options);\n                    } else {\n                        result[finalKey] = data[key];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    // For JSON editor only. Should be extracted.\n    static convertDataToString(data: any, callbacks: any = {}) {\n        let result = null;\n\n        if (data instanceof Array) {\n            result = [];\n\n            data.forEach(function (obj) {\n                result.push(Extractor.convertDataToString(obj));\n            });\n        } else if (typeof data === 'object') {\n            result = {};\n\n            for (let key in data) {\n                if (typeof data[key] === 'object') {\n                    if (data[key] instanceof Date) {\n                        result[key] =\n                            'date' in callbacks &&\n                            callbacks.date instanceof Function ?\n                                callbacks.date(data[key]) : data[key].yyyymmdd('-');\n                    } else {\n                        result[key] = Extractor.convertDataToString(data[key]);\n                    }\n                } else if (typeof data[key] !== 'function') {\n                    result[key] = data[key];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static convertStringToSnakeCase(value) {\n        const result = value.replace(/([A-Z]+)/g, \"_$1\").toLowerCase();\n\n      return result;\n    }\n}\n\nlet Extractor = ObjectAttributeTypeExtractor;\n","import { ICustomComponentConstructor } from \"../../HbFormModule\";\nimport { ValidatorFn } from \"@angular/forms\";\n\nexport type RenderType = 'text' | 'email' | 'number' | 'hidden' | 'radio' | 'checkbox' | 'textarea' | 'select';\nexport type HtmlElementAttribute = 'label' | 'input' | 'inputContainer' | 'widgetContainer';\n\ntype ObjectHtmlElementAttribute = 'objectHeaderContainer' | 'objectHeader' | HtmlElementAttribute;\ntype ArrayHtmlElementAttribute = 'arrayHeaderContainer' | 'arrayHeader' | HtmlElementAttribute;\n\nexport interface IBaseFormConfig {\n    label?: string;\n    defaultValue?: any;\n    hints?: string | { (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): string };\n    validators?: Array<ValidatorFn> | { (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): Array<ValidatorFn> };\n    useValidators?: Array<string>;\n    renderType?: RenderType;\n    hide?: boolean;\n    hideHeader?: boolean;\n    useComponent?: ICustomComponentConstructor;\n    html?: {\n        id?: {\n            [key in HtmlElementAttribute]: string\n        },\n        class?: {\n            [key in HtmlElementAttribute]: string\n        },\n        textarea?: {\n            row?: number\n        }\n    };\n    beforeSetValue?: {\n        (currentTemplateObject, rawValue): void\n    };\n    afterSetValue?: {\n        (currentTemplateObject, rawValue): void\n    };\n}\n\nexport const FormConfigSymbol = Symbol('FormConfig');\n\nexport function FormConfig(options: IBaseFormConfig) {\n    let slug = null;\n\n    if (options.label) {\n        slug = options.label.toLowerCase()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n    }\n\n    return Reflect.metadata(FormConfigSymbol,\n        Object.assign({\n            hiderHeader: false,\n            slug,\n        }, options)\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IArrayOptionsFormConfig extends IBaseFormConfig {\n    onPush?: (childrenTemplate: any, diContainer: Map<string, any>) => void\n    arrayType?: 'object' | 'primitive' | 'enum'\n}\n\nexport const ArrayOptionsSymbol = Symbol('IArrayOptionsFormConfig');\n\nexport function ArrayOptions(options: IArrayOptionsFormConfig) {\n    return Reflect.metadata(\n        ArrayOptionsSymbol,\n        Object.assign(\n            <IArrayOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IObjectOptionsFormConfig extends IBaseFormConfig {\n    onCreate: (childrenTemplate: any, diContainer: Map<string, any>) => void\n}\n\nexport const ObjectOptionsSymbol = Symbol('IObjectOptionsFormConfig');\n\nexport function ObjectOptions(options: IObjectOptionsFormConfig) {\n    return Reflect.metadata(\n        ObjectOptionsSymbol,\n        Object.assign(\n            <IObjectOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { Observable } from \"rxjs\";\n\nexport interface IAutocompleteOptions {\n    onInit?: (childrenTemplate: any, diContainer: Map<string, any>) => void;\n\n    // No being used yet\n    options?: Observable<\n        Array<{\n            label:string,\n            value: any\n        }>\n    >\n}\n\nexport const AutocompleteSymbol = Symbol('IAutocompleteOptions');\n\nexport function AutocompleteOptions(options: IAutocompleteOptions) {\n    return Reflect.metadata(\n        AutocompleteSymbol, {\n            autocomplete: Object.assign(\n                <IAutocompleteOptions>{\n                }, options\n            )\n        }\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\nimport { Observable } from \"rxjs\";\n\nexport interface IChoice {\n    name: string;\n    value: any;\n}\n\n/**\n *  For Form field accepts one value only out of multiple available options\n */\nexport interface IChoiceOptionsFormConfig extends IBaseFormConfig {\n    // checkbox is for boolean only\n    renderType?: 'radio' | 'select' | 'checkbox';\n    options: {\n        (\n            diContainer: Map<string, any>,\n            currentTemplateObject,\n            parentTemplateObject\n        ): Array<IChoice> | Observable<Array<IChoice>>\n    } | Array<IChoice> | Observable<Array<IChoice>>;\n}\n\nexport const ChoiceOptionsSymbol = Symbol('IChoiceOptionsFormConfig');\n\nexport function ChoiceOptions(options: IChoiceOptionsFormConfig) {\n    return Reflect.metadata(\n        ChoiceOptionsSymbol,\n        Object.assign({\n                maxChoices: 1\n            },\n            <IChoiceOptionsFormConfig>{\n                renderType: 'select'\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\nimport { Observable } from \"rxjs\";\nimport { FormControl } from \"@angular/forms\";\nimport { IChoice } from \"./ChoiceOptions\";\n\nexport class OptionWrapper {\n    label = '';\n    control = new FormControl();\n    renderType = 'checkbox';\n    options = [];\n\n    constructor(option: IChoice) {\n        this.options.push(option);\n    }\n}\n\nexport interface IMultipleChoicesOptionsFormConfig extends IBaseFormConfig {\n    maxChoices?: number;\n    options: {\n        (\n            diContainer: Map<string, any>,\n            currentTemplateObject,\n            parentTemplateObject\n        ): Array<OptionWrapper> | Observable<Array<OptionWrapper>>\n    } | Array<OptionWrapper> | Observable<Array<OptionWrapper>>;\n}\n\nexport const MultipleChoicesOptionsSymbol = Symbol('IMultipleChoicesOptionsFormConfig');\n\nexport function MultipleChoicesOptions(options: IMultipleChoicesOptionsFormConfig) {\n    return Reflect.metadata(\n        MultipleChoicesOptionsSymbol,\n        Object.assign({\n                arrayType: 'enum'\n            },\n            <IMultipleChoicesOptionsFormConfig>{\n                maxChoices: null,\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from \"./FormConfig\";\n\nexport interface IFlexibleObjectArrayFormConfig extends IBaseFormConfig {\n    objectDefinitions: Array<{\n        label: string,\n        structure: any // The class with decorator or data object\n    }>,\n    expandOptions?: boolean\n    // You need to specific which object definition you want to use for each value\n    resolveFlexibleObjectArrayConfig: (template: any, rawValue) => void\n}\n\nexport const FlexibleObjectArraySymbol = Symbol('IFlexibleObjectArrayFormConfig');\n\nexport function FlexibleObjectArray(options: IFlexibleObjectArrayFormConfig) {\n    return Reflect.metadata(\n        FlexibleObjectArraySymbol,\n        Object.assign(\n            {\n                expandOptions: false,\n            }, options, {\n                arrayType: 'object',\n            }\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IMatExtraOptionsFormConfig extends IBaseFormConfig {\n    matExtra: {\n        matPrefix?: string,\n        matSuffix?: string,\n    }\n}\n\nexport const MatExtraOptionsSymbol = Symbol('IMatExtraOptionsFormConfig');\n\nexport function MatExtraOptions(options: IMatExtraOptionsFormConfig) {\n    return Reflect.metadata(\n        MatExtraOptionsSymbol,\n        Object.assign(\n            <IMatExtraOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { OnOATResolved } from \"../ObjectAttributeTypeExtractor\";\n\nimport { FormConfigSymbol } from './decorators/FormConfig';\nimport { ArrayOptionsSymbol } from './decorators/ArrayOptions';\nimport { ObjectOptionsSymbol } from './decorators/ObjectOptions';\nimport { AutocompleteSymbol } from './decorators/AutocompleteOptions';\nimport { ChoiceOptionsSymbol } from './decorators/ChoiceOptions';\nimport { MultipleChoicesOptionsSymbol } from './decorators/MultipleChoicesOptions';\nimport { FlexibleObjectArraySymbol } from \"./decorators/FlexibleObjectArray\";\nimport { MatExtraOptionsSymbol } from \"./decorators/MatExtraOptions\";\n\nexport function onOATResolved(target, key, resolved) {\n    if (!resolved.formFactory) {\n        resolved.formFactory = {};\n        [\n            FormConfigSymbol,\n            ArrayOptionsSymbol,\n            ObjectOptionsSymbol,\n            ChoiceOptionsSymbol,\n            MultipleChoicesOptionsSymbol,\n            FlexibleObjectArraySymbol,\n            AutocompleteSymbol,\n            MatExtraOptionsSymbol\n        ].forEach((eachSymbol) => {\n            let getMetadataArgs = [eachSymbol, target];\n\n            if (key) {\n                getMetadataArgs.push(key);\n            }\n\n            if (\n                Reflect.hasMetadata.apply(Reflect, getMetadataArgs)\n            ) {\n                resolved.formFactory = Object.assign({},\n                    resolved.formFactory,\n                    Reflect.getMetadata.apply(Reflect, getMetadataArgs)\n                );\n            }\n        });\n    }\n}\n\nexport function SetupConfig() {\n    return OnOATResolved(onOATResolved);\n}\n","import {\n    FormBuilder,\n    FormGroup,\n    FormControl,\n    FormArray,\n    Validators,\n} from '@angular/forms';\nimport {\n    NonPrimitiveTypeMeta,\n    ObjectAttributeTypeExtractor as Extractor\n} from \"../ObjectAttributeTypeExtractor\";\n\nexport * from './NgFormFactoryDecorators';\n\nexport class Ng2FormFactory {\n    static generateFormGroupByObject(\n        formBuilder: FormBuilder,\n        object: any,\n        resolveTypeAny: () => {\n            ngFormControl: any,\n            templateConfig: any\n        } = null,\n        options: any = {}\n    ) {\n        return Ng2FormFactory.generateFormGroupByOATMapping(\n            formBuilder, Extractor.generateMapping(object, options), resolveTypeAny\n        );\n    }\n\n    static diContainer = new Map();\n\n    static generateLabel(key) {\n        const fixedKey = key.replace(/([A-Z]+)/g, \" $1\").replace(/_/g, ' ');\n\n        return fixedKey.charAt(0).toUpperCase() + fixedKey.slice(1);\n    }\n\n    static generateFormGroupByOATMapping(\n        formBuilder: FormBuilder,\n        attributeMappingObject: any, // Yet all attributes inside should be typeof ExtractorResultType\n        resolveTypeAny: (attrMapping, key: string) => { ngFormControl: any, templateConfig: any } = null,\n        resolveTypeUndefined: (attrMapping, key: string) => { ngFormControl: any, templateConfig: any } = null\n    ) {\n        let result: any = {\n            ngFormControl: {},\n            templateConfig: {},\n        };\n        const isNonPrimitiveType = ['array', 'object'].indexOf(attributeMappingObject._type) > -1;\n        let attrMapping = isNonPrimitiveType ? attributeMappingObject._mapping : attributeMappingObject;\n\n        for (let key in attrMapping) {\n            // TODO: Skip attributes should be configurable\n            if (['id'].indexOf(key) > -1) continue;\n\n            let resolved = null;\n            let currentTemplateConfig = null;\n            let current = attrMapping[key];\n\n            // Object or Array\n            if (['object', 'array'].indexOf(current._type) > -1) {\n                if (current._type === 'array') {\n                    resolved = Ng2FormFactory.handleArray(current, key, formBuilder);\n                } else {\n                    // Handle Object\n                    let child = Ng2FormFactory.prepareAndCreateChildTemplateConfig(current, key, formBuilder)();\n\n                    resolved = {\n                        groupType: 'object',\n                        control: child.ngFormControl instanceof FormGroup ?\n                            child.ngFormControl : new FormGroup(child.ngFormControl, Ng2FormFactory.resolveFormValidators(child).validators),\n                        children: child.templateConfig\n                    };\n                }\n            }\n            // Primitive type and date\n            else if (current._type !== 'any') {\n                if (current !== 'undefined' && typeof current._type != 'undefined') {\n                    let { validators, valueNotEmpty } = Ng2FormFactory.resolveFormValidators(current);\n\n                    currentTemplateConfig = {\n                        type: current._type,\n                        control: new FormControl(valueNotEmpty ? current._value : '', validators)\n                    };\n                } else {\n                    resolved = resolveTypeUndefined ? resolveTypeUndefined(current, key) : null; // Resolve as null first\n                }\n            }\n            // Last case: Null value => any\n            else {\n                resolved = resolveTypeAny ? resolveTypeAny(current, key) : null; // Resolve as null first\n            }\n\n            // If resolved is still null, set it to default\n            if (!currentTemplateConfig && !resolved) {\n                let { validators } = Ng2FormFactory.resolveFormValidators(current);\n\n                resolved = {\n                    type: 'string',\n                    renderType: 'text',\n                    control: new FormControl('', validators)\n                };\n            }\n\n            // FIXME: this checking might be redundant\n            if (resolved) {\n                currentTemplateConfig = resolved;\n            }\n\n            currentTemplateConfig.label = Ng2FormFactory.generateLabel(key);\n            currentTemplateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(currentTemplateConfig);\n            Ng2FormFactory.resolveTemplateConfigByType(\n                current, currentTemplateConfig\n            );\n\n            result.ngFormControl[key] = currentTemplateConfig.control;\n            result.templateConfig[key] = currentTemplateConfig;\n        }\n\n        result.templateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(result.templateConfig);\n\n        if (isNonPrimitiveType) {\n            result.templateConfig = {\n                groupType: attributeMappingObject.type,\n                children: result.templateConfig\n            };\n\n            Ng2FormFactory.setTemplatePreset(attributeMappingObject, result.templateConfig);\n        }\n\n        return result;\n    }\n\n    static resolveFormValidators(current: any) {\n        let validators = current.formFactory && current.formFactory.validators ? current.formFactory.validators : [],\n            valueNotEmpty = [undefined, null].indexOf(current._value) === -1;\n\n        validators = typeof validators === 'function' ? validators(Ng2FormFactory.diContainer) : validators;\n\n        if (valueNotEmpty && validators.length === 0) validators.push(Validators.required);\n\n        return { validators, valueNotEmpty };\n    }\n\n    private static prepareAndCreateChildTemplateConfig(\n        currentInput: any,\n        key: string,\n        formBuilder: FormBuilder,\n        isRaw:boolean = false\n    ) {\n        const lambda = function () {\n            let current = null;\n\n            if (isRaw) {\n                // Mock an array type with targeted Prototype\n                current = new NonPrimitiveTypeMeta(\n                    'array',\n                    Extractor.generateMapping(\n                        new currentInput()\n                    )\n                );\n            } else {\n                current = currentInput;\n            }\n\n            let schemaTemp = null;\n\n            if (\n                'type' in current._mapping &&\n                [\n                    'any',\n                    'string',\n                    'boolean',\n                    'number',\n                    'date',\n                    ''\n                ].indexOf(current._mapping.type) > -1\n            ) {\n                // For primitive type array\n                let control = new FormControl(\n                    'value' in current._mapping ? current._mapping.value : '',\n                    [Validators.required]\n                ), templateConfig = {};\n\n                templateConfig[key] = {\n                    label: Ng2FormFactory.generateLabel(key),\n                    type: current._mapping.type,\n                    control,\n                };\n\n                schemaTemp = {\n                    ngFormControl: control,\n                    templateConfig\n                };\n\n                Ng2FormFactory.resolveTemplateConfigByType(\n                    current._mapping, templateConfig[key]\n                );\n            } else {\n                // For reference type array or object\n                schemaTemp = Ng2FormFactory.generateFormGroupByOATMapping(formBuilder, current._mapping);\n            }\n\n            schemaTemp.templateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(schemaTemp.templateConfig);\n\n            if ('formFactory' in current && typeof current.formFactory.onCreate === 'function') {\n                current.formFactory.onCreate(\n                    schemaTemp.templateConfig, Ng2FormFactory.diContainer\n                );\n            }\n\n            return {\n                ngFormControl:\n                    schemaTemp.ngFormControl instanceof FormControl || current.type === 'object' ?\n                        schemaTemp.ngFormControl :\n                        // For reference type array\n                        new FormGroup(schemaTemp.ngFormControl, Ng2FormFactory.resolveFormValidators(schemaTemp).validators),\n                templateConfig: schemaTemp.templateConfig\n            };\n        };\n\n        return lambda;\n    }\n\n    private static handleArray(current: any, key: string, formBuilder: FormBuilder) {\n        let ngFormArrayControl = new FormArray([], Ng2FormFactory.resolveFormValidators(current).validators);\n        let initChildren = [];\n        let arrayType = null;\n\n        let result = {\n            groupType: 'array',\n            arrayType:\n                current.formFactory && current.formFactory.arrayType ?\n                    arrayType :\n                    'type' in current._mapping ?\n                        'primitive' : 'object'\n            ,\n            control: ngFormArrayControl,\n            children: [],\n            childrenConfigName:[],\n            useConfig: 0,\n            add: null,\n            remove: null\n        };\n\n        if (current.formFactory && current.formFactory.objectDefinitions) {\n            let i = 0;\n            current.formFactory.objectDefinitions.forEach(function (each) {\n                initChildren[i] = Ng2FormFactory.prepareAndCreateChildTemplateConfig(each.structure, '', formBuilder, true);\n                result.childrenConfigName[i] = each.label;\n                i += 1;\n            });\n        } else {\n            initChildren[0] = Ng2FormFactory.prepareAndCreateChildTemplateConfig(current, key, formBuilder)\n        }\n\n        let add = function () {\n                let childConfig = initChildren[result.useConfig]();\n\n                const control = <FormArray>ngFormArrayControl;\n                control.push(childConfig.ngFormControl);\n                result.children.push(childConfig.templateConfig);\n\n                childConfig.templateConfig.flexibleObjectTypeName = result.childrenConfigName[result.useConfig];\n\n                if ('formFactory' in current && typeof current.formFactory.onPush === 'function') {\n                    current.formFactory.onPush(\n                        childConfig.templateConfig, Ng2FormFactory.diContainer\n                    );\n                }\n            },\n            remove = function (i: number) {\n                const control = <FormArray>ngFormArrayControl;\n                control.removeAt(i);\n                result.children.splice(i, 1);\n            };\n\n        result.add = add;\n        result.remove = remove;\n\n        // Ng2FormFactory.setTemplatePreset(current, result);\n\n        return result;\n    }\n\n    static factorySetValueFunctionToTemplate(templateObject) {\n        const lambda = function (rawValue) {\n            for (var key in rawValue) {\n                let targetTemplate = templateObject.groupType ? templateObject.children : templateObject;\n\n                if (key in targetTemplate) {\n                    if (targetTemplate[key].type) {\n                        if (typeof rawValue[key] != 'object') {\n                            if (\n                                'beforeSetValue' in targetTemplate[key]\n                            ) {\n                                targetTemplate[key].beforeSetValue(targetTemplate[key], rawValue);\n                            }\n\n                            targetTemplate[key].control.setValue(\n                                // Do not cast to string or boolean value will be broken\n                                rawValue[key]\n                            );\n\n                            if (\n                                'afterSetValue' in targetTemplate[key]\n                            ) {\n                                targetTemplate[key].afterSetValue(targetTemplate[key], rawValue);\n                            }\n                        } else if (typeof rawValue[key] != 'undefined' || rawValue[key] != null) { // skip if rawValue[key] is null or undefined\n                            // debugger;\n                            // Something goes wrong\n                        }\n                    } else {\n                        // For Object\n                        if (targetTemplate[key].groupType === 'object') {\n                            // Let FormGroup to handle value setting\n                            targetTemplate[key].setValue(rawValue[key]);\n                        } else {\n                            // Even this field is array, rawValue[key] can be null\n                            if (!rawValue[key]) continue;\n\n                            // Array\n                            // Remove all elements\n                            while (targetTemplate[key].control.controls.length > 0) {\n                                targetTemplate[key].remove(0);\n                            }\n\n                            let i = 0;\n\n                            rawValue[key].forEach(function (each) {\n                                if (\n                                    'resolveFlexibleObjectArrayConfig' in targetTemplate[key]\n                                ) {\n                                    targetTemplate[key].useConfig = targetTemplate[key].resolveFlexibleObjectArrayConfig(each);\n                                }\n\n                                targetTemplate[key].add();\n\n                                let fixForPrimitiveArray = {};\n                                fixForPrimitiveArray[key] = each;\n\n                                targetTemplate[key].children[i].setValue(\n                                    targetTemplate[key].arrayType !== 'object' ? fixForPrimitiveArray : each\n                                );\n\n                                i++;\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        return lambda;\n    }\n\n    static resolveTemplateConfigByType(attrMapping, templateObj) {\n        if (attrMapping.type === 'boolean') {\n            templateObj.renderType = attrMapping.expandOptions ? 'radio' : 'checkbox';\n        } else if (attrMapping.options) {\n            if (attrMapping.options.length > 2 && attrMapping.maxChoices) {\n                templateObj.renderType = attrMapping.expandOptions ? (\n                    attrMapping.maxChoices == 1 ?\n                        'radio' : 'checkbox'\n                ) : 'select';\n            } else {\n                templateObj.renderType = attrMapping.expandOptions ? 'radio' : 'checkbox';\n            }\n        } else {\n            templateObj.renderType = attrMapping.type;\n            if (templateObj.type === 'string') templateObj.renderType = 'text';\n        }\n\n        Ng2FormFactory.setTemplatePreset(attrMapping, templateObj);\n    }\n\n    // Copy setting from OAT to templateConfig object\n    static setTemplatePreset(attrMapping, templateObj) {\n        [\n            'label',\n            'type',\n            'useComponent',\n            'beforeSetValue',\n            'afterSetValue',\n            'resolveFlexibleObjectArrayConfig',\n            'maxChoices',\n            'expandOptions',\n            'options',\n            'hints',\n            'hide',\n            'html',\n            'renderType',\n            'arrayType',\n            'autocomplete',\n            'matExtra',\n        ].forEach(function (each) {\n            if (attrMapping.formFactory && each in attrMapping.formFactory) {\n                templateObj[each] = attrMapping.formFactory[each];\n            }\n        });\n\n        templateObj.diContainer = Ng2FormFactory.diContainer;\n    }\n}\n","import {Pipe} from \"@angular/core\";\n\n@Pipe({\n    name: 'mapToIterable'\n})\nexport class MapToIterable {\n    transform(object: Object): Array<any> {\n        let result = [];\n\n        for (let key of Object.keys(object)) {\n            if (object.hasOwnProperty(key)) {\n                result.push({key, val: object[key]});\n            }\n        }\n\n        return result;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatSelectModule } from \"@angular/material/select\";\n\nimport {\n    HbFormArrayComponent,\n    HbFormMatArrayComponent,\n    HbFormObjectComponent,\n    HbFormMatObjectComponent,\n    HbFormWidgetComponent,\n    HbFormMatWidgetComponent\n} from '../public-api';\nimport { IBaseFormConfig } from \"./class/decorators/FormConfig\";\nimport { IChoiceOptionsFormConfig } from \"./class/decorators/ChoiceOptions\";\nimport { IArrayOptionsFormConfig } from \"./class/decorators/ArrayOptions\";\nimport { MapToIterable } from \"./pipe/MapToIterable\";\n\nconst directivesAndPipes = [\n    HbFormArrayComponent,\n    HbFormMatArrayComponent,\n    HbFormObjectComponent,\n    HbFormMatObjectComponent,\n    HbFormWidgetComponent,\n    HbFormMatWidgetComponent,\n    MapToIterable,\n];\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n\n        // Material Design\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatRadioModule,\n        MatSelectModule\n    ],\n    declarations: directivesAndPipes,\n    exports: [\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatRadioModule,\n        MatSelectModule,\n        ...directivesAndPipes,\n    ]\n})\nexport class HbFormModule {\n}\n\n// Actually template object is way more complicated. Types in here have not address all attributes but configurable only\nexport type TemplateObjectType = IBaseFormConfig | IChoiceOptionsFormConfig | IArrayOptionsFormConfig;\n\nexport interface ICustomComponent {\n    // TemplateObjectType\n    templateObject: any;\n    parentTemplateObject: any;\n}\n\nexport interface ICustomComponentConstructor {\n    new (...deps: any[]): ICustomComponent;\n}\n"]}