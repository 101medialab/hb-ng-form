{"version":3,"file":"hb-ng-form.js","sources":["ng://hb-ng-form/lib/components/hb-form-widget.component.ts","ng://hb-ng-form/lib/components/hb-form-array.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-array.component.ts","ng://hb-ng-form/lib/components/hb-form-object.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-object.component.ts","ng://hb-ng-form/lib/components/hb-form-mat-widget.component.ts","ng://hb-ng-form/lib/ObjectAttributeTypeExtractor.ts","ng://hb-ng-form/lib/class/decorators/FormConfig.ts","ng://hb-ng-form/lib/class/decorators/ArrayOptions.ts","ng://hb-ng-form/lib/class/decorators/ObjectOptions.ts","ng://hb-ng-form/lib/class/decorators/AutocompleteOptions.ts","ng://hb-ng-form/lib/class/decorators/ChoiceOptions.ts","ng://hb-ng-form/lib/class/decorators/MultipleChoicesOptions.ts","ng://hb-ng-form/lib/class/decorators/FlexibleObjectArray.ts","ng://hb-ng-form/lib/class/decorators/MatExtraOptions.ts","ng://hb-ng-form/lib/class/NgFormFactoryDecorators.ts","ng://hb-ng-form/lib/class/Ng2FormFactory.ts","ng://hb-ng-form/lib/pipe/MapToIterable.ts","ng://hb-ng-form/lib/HbFormModule.ts","ng://hb-ng-form/public-api.ts","ng://hb-ng-form/hb-ng-form.ts"],"sourcesContent":["import {\n    Component,\n    OnInit,\n    ComponentFactoryResolver,\n    ViewChild,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n    selector: 'hb-form-widget',\n    templateUrl: './hb-form-widget.tpl.html',\n    inputs: ['data', 'key', 'parent']\n})\nexport class HbFormWidgetComponent implements OnInit {\n    public resolvedOptions;\n    public key;\n    public data;\n    public parent;\n    static slugMap = [];\n\n    @ViewChild(\"customBlock\", { read: ViewContainerRef, static: true }) customBlock;\n\n    constructor(\n        private resolver: ComponentFactoryResolver\n    ) {\n    }\n\n    ngAfterViewInit() {\n        if (!this.data.hide && this.data.useComponent) {\n            const factory = this.resolver.resolveComponentFactory(\n                this.data.useComponent\n            );\n            const ref = this.customBlock.createComponent(factory);\n            ref.instance.templateObject = this.data;\n            ref.instance.parentTemplateObject = this.parent;\n\n            ref.changeDetectorRef.detectChanges();\n        }\n    }\n\n    ngOnInit() {\n        let data = this.data;\n\n        let result = null;\n        let resolved = null;\n        const options = data.options;\n\n        if (typeof options === 'function') {\n            resolved = options(data.diContainer, this.data, this.parent);\n        } else if (!(result instanceof Observable)) {\n            resolved = options;\n        }\n\n        result = resolved;\n\n        if (!(resolved instanceof Observable)) {\n            result = new Observable((o) => {\n                o.next(resolved);\n                o.complete();\n            });\n        }\n\n        this.resolvedOptions = result;\n    }\n\n    stringToBoolean(val) {\n        return val === 'true'\n    }\n\n    updateParentValue($event, option) {\n        const target = $event.target ? $event.target : $event.source;\n        let isChecked = target.checked;\n\n        switch (this.data.renderType) {\n            case 'checkbox':\n                let parentControls = this.parent.control.controls;\n\n                if (isChecked) {\n                    this.parent.add();\n\n                    parentControls[parentControls.length - 1].setValue(option.value);\n                } else {\n                    let i = 0;\n\n                    for (; i < parentControls.length; i++) {\n                        if (parentControls[i].value == option.value) break;\n                    }\n\n                    this.parent.remove(i);\n                }\n\n                break;\n\n            case 'radio':\n                if (isChecked) this.data.control.patchValue(target.value);\n\n                break;\n        }\n    }\n\n    typeof(input) {\n        return typeof input;\n    }\n\n    slugifyString(input: string) {\n        if (input in HbFormWidgetComponent.slugMap) {\n            return HbFormWidgetComponent.slugMap[input];\n        }\n\n        return HbFormWidgetComponent.slugMap[input] = input\n            .toLowerCase()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n    }\n}\n","import { Component } from \"@angular/core\";\nimport { HbFormWidgetComponent } from './hb-form-widget.component';\n\n@Component({\n    selector: 'hb-form-array',\n    templateUrl: './hb-form-array.tpl.html',\n    inputs: ['key', 'data', 'parent']\n})\nexport class HbFormArrayComponent extends HbFormWidgetComponent {\n}\n","import { Component } from \"@angular/core\";\nimport { HbFormArrayComponent } from \"./hb-form-array.component\";\n\n@Component({\n    selector: 'hb-mat-form-array',\n    templateUrl: './hb-form-mat-array.tpl.html',\n    inputs: ['key', 'data', 'parent']\n})\nexport class HbFormMatArrayComponent extends HbFormArrayComponent {\n}\n","import { Component } from \"@angular/core\";\nimport { HbFormWidgetComponent } from './hb-form-widget.component';\n\n@Component({\n    selector: 'hb-form-object',\n    templateUrl:  './hb-form-object.tpl.html',\n    inputs: ['id', 'key', 'data', 'parent']\n})\nexport class HbFormObjectComponent extends HbFormWidgetComponent {\n}\n","import { Component } from \"@angular/core\";\nimport { HbFormObjectComponent } from \"./hb-form-object.component\";\n\n@Component({\n    selector: 'hb-mat-form-object',\n    templateUrl:  './hb-form-mat-object.tpl.html',\n    inputs: ['id', 'key', 'data', 'parent']\n})\nexport class HbFormMatObjectComponent extends HbFormObjectComponent {\n}\n","import { HbFormWidgetComponent } from \"./hb-form-widget.component\";\nimport { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'hb-mat-form-widget',\n    templateUrl: './hb-form-mat-widget.tpl.html',\n    inputs: ['data', 'key', 'parent']\n})\nexport class HbFormMatWidgetComponent extends HbFormWidgetComponent implements OnInit {\n    ngOnInit() {\n        super.ngOnInit();\n\n        if (\n            this.parent.arrayType == 'enum' &&\n            this.parent.control.value.indexOf(this.data.options[0].value) > -1\n        ) {\n            this.data.control.setValue(\n                this.data.options[0].value\n            )\n        }\n    }\n}\n","export type AttributeType = 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object' | 'any';\n\nexport class TypeMeta {\n    constructor(protected _type: AttributeType) {}\n\n    get type(): AttributeType {\n        return this._type;\n    }\n}\n\nexport class PrimitiveTypeMeta extends TypeMeta {\n    constructor(\n        protected _value: any\n    ) {\n        super(\n            <AttributeType>([\n                'string',\n                'number',\n                'boolean'\n            ].indexOf(typeof _value) > -1 ? typeof _value : 'any')\n        );\n    }\n\n    get value(): any {\n        return this._value;\n    }\n}\n\nexport class NonPrimitiveTypeMeta extends TypeMeta {\n    constructor(\n        type: 'object' | 'array' | 'date',\n        private _mapping: any = null, // All attributes should be type of ExtractorResultType\n        private _value: any = null\n    ) {\n        super(type);\n    }\n\n    get mapping(): ExtractorResultType {\n        return this._mapping;\n    }\n\n    get value(): any {\n        return this._value;\n    }\n}\n\nexport type ExtractorResultType = NonPrimitiveTypeMeta | PrimitiveTypeMeta;\n\nconst OnOATResolvedSymbol = 'OnOATResolved';\n\nexport function OnOATResolved(cb: (target: any, key: string, resolved: any) => void) {\n    return Reflect.metadata(OnOATResolvedSymbol, cb);\n}\n\nexport class ObjectAttributeTypeExtractor {\n    static generateMapping(\n        input: any,\n        options: {\n            keyNamingStrategy?: 'camelCase' | 'snake_case',\n            stripUnderscore?: boolean,\n            onResolved?: (target: any, key?: string, resolved?: any) => void\n        } = {}\n    ): any {\n        options = Object.assign({\n            keyNamingStrategy: 'camelCase',\n            stripUnderscore: false\n        }, options);\n\n        let mapping: any = {};\n        let result: any = null;\n\n        // input is an array, analyze the first cell only\n        if (input instanceof Array) {\n            mapping = new NonPrimitiveTypeMeta(\n                'array',\n                Extractor.generateMapping(input[0], options)\n            );\n        } else {\n            // Analyze attributes inside input object\n            for (let key in input) {\n                if (typeof input[key] !== 'function') {\n                    let resolvedMeta: any = {};\n\n                    // Array or Object\n                    if (typeof input[key] === 'object') {\n                        resolvedMeta = Extractor.generateObjectTypeMapping(input, key, options);\n\n                    // Any primitive type\n                    } else if (typeof input[key] !== 'function') {\n                        resolvedMeta = new PrimitiveTypeMeta(input[key]);\n                    }\n\n                    if (Reflect.hasMetadata(OnOATResolvedSymbol, input, key)) {\n                        Reflect.getMetadata(\n                            OnOATResolvedSymbol, input, key\n                        )(\n                            input, key, resolvedMeta\n                        );\n                    } else if (typeof options.onResolved === 'function') {\n                        options.onResolved(input, key, resolvedMeta);\n                    }\n\n                    // Finished, set resolved attribute metadata to result\n                    mapping[\n                        Extractor.resolveAttributeKey(options, key, input)\n                    ] = resolvedMeta;\n                }\n            }\n        }\n\n        if (\n            typeof input === 'object'\n        ) {\n            if (!(input instanceof Date) && !(input instanceof Array)) {\n                result = new NonPrimitiveTypeMeta('object', mapping);\n            } else {\n                result = mapping;\n            }\n        } else {\n            result = { mapping };\n        }\n\n        if (Reflect.hasMetadata(OnOATResolvedSymbol, input.constructor)) {\n            Reflect.getMetadata(\n                OnOATResolvedSymbol, input.constructor\n            )(\n                input.constructor, null, result\n            );\n        } else if (typeof options.onResolved === 'function') {\n            options.onResolved(input, null, result);\n        }\n\n        return result\n    }\n\n    static generateObjectTypeMapping(object: any, key, options: any) {\n        let resolvedMeta = null;\n\n        // Mark type as any if value is null\n        if (object[key] === null) {\n            resolvedMeta = new PrimitiveTypeMeta(null);\n\n        // For Array\n        } else if (object[key] instanceof Array) {\n            let target = object[key];\n            // For Primitive Array\n            if (typeof target[0] !== 'object') {\n                resolvedMeta = new NonPrimitiveTypeMeta('array', new PrimitiveTypeMeta(target[0]));\n            // For Object Array\n            } else {\n                resolvedMeta = Extractor.generateMapping(target, options);\n            }\n\n        // For Date\n        } else if (object[key] instanceof Date) {\n            resolvedMeta = new NonPrimitiveTypeMeta('date', null, object[key]);\n\n        // For Object\n        } else {\n            resolvedMeta = Extractor.generateMapping(object[key], options);\n        }\n\n        return resolvedMeta;\n    }\n\n    static resolveAttributeKey(options: any, key, object: any) {\n        let setterKey = key;\n\n        // if set function exists, rename _attr to attr\n        if (options.stripUnderscore && key.charAt(0) === '_') {\n            let trimmedKey = key.substr(1, key.length);\n\n            if (trimmedKey in object) {\n                setterKey = trimmedKey;\n            }\n        }\n\n        // Some serializer serialize data with snake_case\n        // but JS Entity Classes name attributes with camelCase\n        if (options.keyNamingStrategy === 'snake_case') {\n            setterKey = Extractor.convertStringToSnakeCase(setterKey);\n        }\n\n        return setterKey;\n    }\n\n    // For naming convention changing. Not really related to this extractor\n    static fixNamingConvention(data: any, options: any) {\n        let result = null;\n        options = Object.assign({\n            keyNamingStrategy: 'camelCase',\n            stripUnderscore: false\n        }, options);\n\n        if (data instanceof Array) {\n            result = [];\n\n            data.forEach(function (obj) {\n                result.push(Extractor.fixNamingConvention(obj, options));\n            });\n        } else if (typeof data === 'object') {\n            result = {};\n\n            for (let key in data) {\n                if (!options.stripUnderscore || key.charAt(0) !== '_') {\n                    let finalKey = key;\n\n                    if (options.keyNamingStrategy === 'snake_case') {\n                        finalKey = Extractor.convertStringToSnakeCase(key);\n                    }\n\n                    if (typeof data[key] === 'object') {\n                        result[finalKey] = Extractor.fixNamingConvention(data[key], options);\n                    } else {\n                        result[finalKey] = data[key];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    // For JSON editor only. Should be extracted.\n    static convertDataToString(data: any, callbacks: any = {}) {\n        let result = null;\n\n        if (data instanceof Array) {\n            result = [];\n\n            data.forEach(function (obj) {\n                result.push(Extractor.convertDataToString(obj));\n            });\n        } else if (typeof data === 'object') {\n            result = {};\n\n            for (let key in data) {\n                if (typeof data[key] === 'object') {\n                    if (data[key] instanceof Date) {\n                        result[key] =\n                            'date' in callbacks &&\n                            callbacks.date instanceof Function ?\n                                callbacks.date(data[key]) : data[key].yyyymmdd('-');\n                    } else {\n                        result[key] = Extractor.convertDataToString(data[key]);\n                    }\n                } else if (typeof data[key] !== 'function') {\n                    result[key] = data[key];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static convertStringToSnakeCase(value) {\n        const result = value.replace(/([A-Z]+)/g, \"_$1\").toLowerCase();\n\n      return result;\n    }\n}\n\nlet Extractor = ObjectAttributeTypeExtractor;\n","import { ICustomComponentConstructor } from \"../../HbFormModule\";\nimport { ValidatorFn } from \"@angular/forms\";\n\nexport type RenderTypeCompatible = 'text' | 'email' | 'number' | 'hidden' | 'radio' | 'checkbox' | 'textarea' | 'select';\n\nexport interface IBaseFormConfig {\n    label?: string;\n    defaultValue?: any;\n    hints?: string | { (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): string };\n    validators?: Array<ValidatorFn> | { (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): Array<ValidatorFn> };\n    useValidators?: Array<string>;\n    renderType?: RenderTypeCompatible;\n    hide?: boolean;\n    hideHeader?: boolean;\n    useComponent?: ICustomComponentConstructor;\n    html?: {\n        idAttr?: string,\n        classAttr?: string,\n    };\n    beforeSetValue?: {\n        (currentTemplateObject, rawValue): void\n    };\n    afterSetValue?: {\n        (currentTemplateObject, rawValue): void\n    };\n}\n\nexport const FormConfigSymbol = Symbol('FormConfig');\n\nexport function FormConfig(options: IBaseFormConfig) {\n    let slug = null;\n\n    if (options.label) {\n        slug = options.label.toLowerCase()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n    }\n\n    return Reflect.metadata(FormConfigSymbol,\n        Object.assign({\n            hiderHeader: false,\n            slug,\n        }, options)\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IArrayOptionsFormConfig extends IBaseFormConfig {\n    onPush?: (childrenTemplate: any, diContainer: Map<string, any>) => void\n    arrayType?: 'object' | 'primitive' | 'enum'\n}\n\nexport const ArrayOptionsSymbol = Symbol('IArrayOptionsFormConfig');\n\nexport function ArrayOptions(options: IArrayOptionsFormConfig) {\n    return Reflect.metadata(\n        ArrayOptionsSymbol,\n        Object.assign(\n            <IArrayOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IObjectOptionsFormConfig extends IBaseFormConfig {\n    onCreate: (childrenTemplate: any, diContainer: Map<string, any>) => void\n}\n\nexport const ObjectOptionsSymbol = Symbol('IObjectOptionsFormConfig');\n\nexport function ObjectOptions(options: IObjectOptionsFormConfig) {\n    return Reflect.metadata(\n        ObjectOptionsSymbol,\n        Object.assign(\n            <IObjectOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { Observable } from \"rxjs\";\n\nexport interface IAutocompleteOptions {\n    onInit?: (childrenTemplate: any, diContainer: Map<string, any>) => void;\n\n    // No being used yet\n    options?: Observable<\n        Array<{\n            label:string,\n            value: any\n        }>\n    >\n}\n\nexport const AutocompleteSymbol = Symbol('IAutocompleteOptions');\n\nexport function AutocompleteOptions(options: IAutocompleteOptions) {\n    return Reflect.metadata(\n        AutocompleteSymbol, {\n            autocomplete: Object.assign(\n                <IAutocompleteOptions>{\n                }, options\n            )\n        }\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\nimport { Observable } from \"rxjs\";\n\nexport interface IChoice {\n    name: string;\n    value: any;\n}\n\n/**\n *  For Form field accepts one value only out of multiple available options\n */\nexport interface IChoiceOptionsFormConfig extends IBaseFormConfig {\n    // checkbox is for boolean only\n    renderType?: 'radio' | 'select' | 'checkbox';\n    options: { (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): Array<IChoice> | Observable<Array<IChoice>> };\n}\n\nexport const ChoiceOptionsSymbol = Symbol('IChoiceOptionsFormConfig');\n\nexport function ChoiceOptions(options: IChoiceOptionsFormConfig) {\n    return Reflect.metadata(\n        ChoiceOptionsSymbol,\n        Object.assign({\n                maxChoices: 1\n            },\n            <IChoiceOptionsFormConfig>{\n                renderType: 'select'\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\nimport { Observable } from \"rxjs\";\nimport { FormControl } from \"@angular/forms\";\nimport { IChoice } from \"./ChoiceOptions\";\n\nexport class OptionWrapper {\n    label = '';\n    control = new FormControl();\n    renderType = 'checkbox';\n    options = [];\n\n    constructor(option: IChoice) {\n        this.options.push(option);\n    }\n}\n\nexport interface IMultipleChoicesOptionsFormConfig extends IBaseFormConfig {\n    maxChoices?: number;\n    options: {\n        (diContainer: Map<string, any>, currentTemplateObject, parentTemplateObject): Array<OptionWrapper> |\n        Observable<\n            Array<OptionWrapper>\n        >\n    };\n}\n\nexport const MultipleChoicesOptionsSymbol = Symbol('IMultipleChoicesOptionsFormConfig');\n\nexport function MultipleChoicesOptions(options: IMultipleChoicesOptionsFormConfig) {\n    return Reflect.metadata(\n        MultipleChoicesOptionsSymbol,\n        Object.assign({\n                arrayType: 'enum'\n            },\n            <IMultipleChoicesOptionsFormConfig>{\n                maxChoices: null,\n            }, options\n        )\n    );\n}\n","import { IBaseFormConfig } from \"./FormConfig\";\n\nexport interface IFlexibleObjectArrayFormConfig extends IBaseFormConfig {\n    objectDefinitions: Array<{\n        label: string,\n        structure: any // The class with decorator or data object\n    }>,\n    expandOptions?: boolean\n    // You need to specific which object definition you want to use for each value\n    resolveFlexibleObjectArrayConfig: (template: any, rawValue) => void\n}\n\nexport const FlexibleObjectArraySymbol = Symbol('IFlexibleObjectArrayFormConfig');\n\nexport function FlexibleObjectArray(options: IFlexibleObjectArrayFormConfig) {\n    return Reflect.metadata(\n        FlexibleObjectArraySymbol,\n        Object.assign(\n            {\n                expandOptions: false,\n            }, options, {\n                arrayType: 'object',\n            }\n        )\n    );\n}\n","import { IBaseFormConfig } from './FormConfig';\n\nexport interface IMatExtraOptionsFormConfig extends IBaseFormConfig {\n    matExtra: {\n        matPrefix?: string,\n        matSuffix?: string,\n    }\n}\n\nexport const MatExtraOptionsSymbol = Symbol('IMatExtraOptionsFormConfig');\n\nexport function MatExtraOptions(options: IMatExtraOptionsFormConfig) {\n    return Reflect.metadata(\n        MatExtraOptionsSymbol,\n        Object.assign(\n            <IMatExtraOptionsFormConfig>{\n            }, options\n        )\n    );\n}\n","import { OnOATResolved } from \"../ObjectAttributeTypeExtractor\";\n\nimport { FormConfigSymbol } from './decorators/FormConfig';\nimport { ArrayOptionsSymbol } from './decorators/ArrayOptions';\nimport { ObjectOptionsSymbol } from './decorators/ObjectOptions';\nimport { AutocompleteSymbol } from './decorators/AutocompleteOptions';\nimport { ChoiceOptionsSymbol } from './decorators/ChoiceOptions';\nimport { MultipleChoicesOptionsSymbol } from './decorators/MultipleChoicesOptions';\nimport { FlexibleObjectArraySymbol } from \"./decorators/FlexibleObjectArray\";\nimport { MatExtraOptionsSymbol } from \"./decorators/MatExtraOptions\";\n\nexport function onOATResolved(target, key, resolved) {\n    if (!resolved.formFactory) {\n        resolved.formFactory = {};\n        [\n            FormConfigSymbol,\n            ArrayOptionsSymbol,\n            ObjectOptionsSymbol,\n            ChoiceOptionsSymbol,\n            MultipleChoicesOptionsSymbol,\n            FlexibleObjectArraySymbol,\n            AutocompleteSymbol,\n            MatExtraOptionsSymbol\n        ].forEach((eachSymbol) => {\n            let getMetadataArgs = [eachSymbol, target];\n\n            if (key) {\n                getMetadataArgs.push(key);\n            }\n\n            if (\n                Reflect.hasMetadata.apply(Reflect, getMetadataArgs)\n            ) {\n                resolved.formFactory = Object.assign({},\n                    resolved.formFactory,\n                    Reflect.getMetadata.apply(Reflect, getMetadataArgs)\n                );\n            }\n        });\n    }\n}\n\nexport function SetupConfig() {\n    return OnOATResolved(onOATResolved);\n}\n","import {\n    FormBuilder,\n    FormGroup,\n    FormControl,\n    FormArray,\n    Validators,\n} from '@angular/forms';\nimport {\n    NonPrimitiveTypeMeta,\n    ObjectAttributeTypeExtractor as Extractor\n} from \"../ObjectAttributeTypeExtractor\";\n\nexport * from './NgFormFactoryDecorators';\n\nexport class Ng2FormFactory {\n    static generateFormGroupByObject(\n        formBuilder: FormBuilder,\n        object: any,\n        resolveTypeAny: () => {\n            ngFormControl: any,\n            templateConfig: any\n        } = null,\n        options: any = {}\n    ) {\n        return Ng2FormFactory.generateFormGroupByOATMapping(\n            formBuilder, Extractor.generateMapping(object, options), resolveTypeAny\n        );\n    }\n\n    static diContainer = new Map();\n\n    static generateLabel(key) {\n        const fixedKey = key.replace(/([A-Z]+)/g, \" $1\").replace(/_/g, ' ');\n\n        return fixedKey.charAt(0).toUpperCase() + fixedKey.slice(1);\n    }\n\n    static generateFormGroupByOATMapping(\n        formBuilder: FormBuilder,\n        attributeMappingObject: any, // Yet all attributes inside should be typeof ExtractorResultType\n        resolveTypeAny: (attrMapping, key: string) => { ngFormControl: any, templateConfig: any } = null,\n        resolveTypeUndefined: (attrMapping, key: string) => { ngFormControl: any, templateConfig: any } = null\n    ) {\n        let result: any = {\n            ngFormControl: {},\n            templateConfig: {},\n        };\n        const isNonPrimitiveType = ['array', 'object'].indexOf(attributeMappingObject._type) > -1;\n        let attrMapping = isNonPrimitiveType ? attributeMappingObject._mapping : attributeMappingObject;\n\n        for (let key in attrMapping) {\n            // TODO: Skip attributes should be configurable\n            if (['id'].indexOf(key) > -1) continue;\n\n            let resolved = null;\n            let currentTemplateConfig = null;\n            let current = attrMapping[key];\n\n            // Object or Array\n            if (['object', 'array'].indexOf(current._type) > -1) {\n                if (current._type === 'array') {\n                    resolved = Ng2FormFactory.handleArray(current, key, formBuilder);\n                } else {\n                    // Handle Object\n                    let child = Ng2FormFactory.prepareAndCreateChildTemplateConfig(current, key, formBuilder)();\n\n                    resolved = {\n                        groupType: 'object',\n                        control: child.ngFormControl instanceof FormGroup ?\n                            child.ngFormControl : new FormGroup(child.ngFormControl, Ng2FormFactory.resolveFormValidators(child).validators),\n                        children: child.templateConfig\n                    };\n                }\n            }\n            // Primitive type and date\n            else if (current._type !== 'any') {\n                if (current !== 'undefined' && typeof current._type != 'undefined') {\n                    let { validators, valueNotEmpty } = Ng2FormFactory.resolveFormValidators(current);\n\n                    currentTemplateConfig = {\n                        type: current._type,\n                        control: new FormControl(valueNotEmpty ? current._value : '', validators)\n                    };\n                } else {\n                    resolved = resolveTypeUndefined ? resolveTypeUndefined(current, key) : null; // Resolve as null first\n                }\n            }\n            // Last case: Null value => any\n            else {\n                resolved = resolveTypeAny ? resolveTypeAny(current, key) : null; // Resolve as null first\n            }\n\n            // If resolved is still null, set it to default\n            if (!currentTemplateConfig && !resolved) {\n                let { validators } = Ng2FormFactory.resolveFormValidators(current);\n\n                resolved = {\n                    type: 'string',\n                    renderType: 'text',\n                    control: new FormControl('', validators)\n                };\n            }\n\n            // FIXME: this checking might be redundant\n            if (resolved) {\n                currentTemplateConfig = resolved;\n            }\n\n            currentTemplateConfig.label = Ng2FormFactory.generateLabel(key);\n            currentTemplateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(currentTemplateConfig);\n            Ng2FormFactory.resolveTemplateConfigByType(\n                current, currentTemplateConfig\n            );\n\n            result.ngFormControl[key] = currentTemplateConfig.control;\n            result.templateConfig[key] = currentTemplateConfig;\n        }\n\n        result.templateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(result.templateConfig);\n\n        if (isNonPrimitiveType) {\n            result.templateConfig = {\n                groupType: attributeMappingObject.type,\n                children: result.templateConfig\n            };\n\n            Ng2FormFactory.setTemplatePreset(attributeMappingObject, result.templateConfig);\n        }\n\n        return result;\n    }\n\n    static resolveFormValidators(current: any) {\n        let validators = current.formFactory && current.formFactory.validators ? current.formFactory.validators : [],\n            valueNotEmpty = [undefined, null].indexOf(current._value) === -1;\n\n        validators = typeof validators === 'function' ? validators(Ng2FormFactory.diContainer) : validators;\n\n        if (valueNotEmpty && validators.length === 0) validators.push(Validators.required);\n\n        return { validators, valueNotEmpty };\n    }\n\n    private static prepareAndCreateChildTemplateConfig(\n        currentInput: any,\n        key: string,\n        formBuilder: FormBuilder,\n        isRaw:boolean = false\n    ) {\n        const lambda = function () {\n            let current = null;\n\n            if (isRaw) {\n                // Mock an array type with targeted Prototype\n                current = new NonPrimitiveTypeMeta(\n                    'array',\n                    Extractor.generateMapping(\n                        new currentInput()\n                    )\n                );\n            } else {\n                current = currentInput;\n            }\n\n            let schemaTemp = null;\n\n            if (\n                'type' in current._mapping &&\n                [\n                    'any',\n                    'string',\n                    'boolean',\n                    'number',\n                    'date',\n                    ''\n                ].indexOf(current._mapping.type) > -1\n            ) {\n                // For primitive type array\n                let control = new FormControl(\n                    'value' in current._mapping ? current._mapping.value : '',\n                    [Validators.required]\n                ), templateConfig = {};\n\n                templateConfig[key] = {\n                    label: Ng2FormFactory.generateLabel(key),\n                    type: current._mapping.type,\n                    control,\n                };\n\n                schemaTemp = {\n                    ngFormControl: control,\n                    templateConfig\n                };\n\n                Ng2FormFactory.resolveTemplateConfigByType(\n                    current._mapping, templateConfig[key]\n                );\n            } else {\n                // For reference type array or object\n                schemaTemp = Ng2FormFactory.generateFormGroupByOATMapping(formBuilder, current._mapping);\n            }\n\n            schemaTemp.templateConfig.setValue = Ng2FormFactory.factorySetValueFunctionToTemplate(schemaTemp.templateConfig);\n\n            if ('formFactory' in current && typeof current.formFactory.onCreate === 'function') {\n                current.formFactory.onCreate(\n                    schemaTemp.templateConfig, Ng2FormFactory.diContainer\n                );\n            }\n\n            return {\n                ngFormControl:\n                    schemaTemp.ngFormControl instanceof FormControl || current.type === 'object' ?\n                        schemaTemp.ngFormControl :\n                        // For reference type array\n                        new FormGroup(schemaTemp.ngFormControl, Ng2FormFactory.resolveFormValidators(schemaTemp).validators),\n                templateConfig: schemaTemp.templateConfig\n            };\n        };\n\n        return lambda;\n    }\n\n    private static handleArray(current: any, key: string, formBuilder: FormBuilder) {\n        let ngFormArrayControl = new FormArray([], Ng2FormFactory.resolveFormValidators(current).validators);\n        let initChildren = [];\n        let arrayType = null;\n\n        let result = {\n            groupType: 'array',\n            arrayType:\n                current.formFactory && current.formFactory.arrayType ?\n                    arrayType :\n                    'type' in current._mapping ?\n                        'primitive' : 'object'\n            ,\n            control: ngFormArrayControl,\n            children: [],\n            childrenConfigName:[],\n            useConfig: 0,\n            add: null,\n            remove: null\n        };\n\n        if (current.formFactory && current.formFactory.objectDefinitions) {\n            let i = 0;\n            current.formFactory.objectDefinitions.forEach(function (each) {\n                initChildren[i] = Ng2FormFactory.prepareAndCreateChildTemplateConfig(each.structure, '', formBuilder, true);\n                result.childrenConfigName[i] = each.label;\n                i += 1;\n            });\n        } else {\n            initChildren[0] = Ng2FormFactory.prepareAndCreateChildTemplateConfig(current, key, formBuilder)\n        }\n\n        let add = function () {\n                let childConfig = initChildren[result.useConfig]();\n\n                const control = <FormArray>ngFormArrayControl;\n                control.push(childConfig.ngFormControl);\n                result.children.push(childConfig.templateConfig);\n\n                childConfig.templateConfig.flexibleObjectTypeName = result.childrenConfigName[result.useConfig];\n\n                if ('formFactory' in current && typeof current.formFactory.onPush === 'function') {\n                    current.formFactory.onPush(\n                        childConfig.templateConfig, Ng2FormFactory.diContainer\n                    );\n                }\n            },\n            remove = function (i: number) {\n                const control = <FormArray>ngFormArrayControl;\n                control.removeAt(i);\n                result.children.splice(i, 1);\n            };\n\n        result.add = add;\n        result.remove = remove;\n\n        // Ng2FormFactory.setTemplatePreset(current, result);\n\n        return result;\n    }\n\n    static factorySetValueFunctionToTemplate(templateObject) {\n        const lambda = function (rawValue) {\n            for (var key in rawValue) {\n                let targetTemplate = templateObject.groupType ? templateObject.children : templateObject;\n\n                if (key in targetTemplate) {\n                    if (targetTemplate[key].type) {\n                        if (typeof rawValue[key] != 'object') {\n                            if (\n                                'beforeSetValue' in targetTemplate[key]\n                            ) {\n                                targetTemplate[key].beforeSetValue(targetTemplate[key], rawValue);\n                            }\n\n                            targetTemplate[key].control.setValue(\n                                // Do not cast to string or boolean value will be broken\n                                rawValue[key]\n                            );\n\n                            if (\n                                'afterSetValue' in targetTemplate[key]\n                            ) {\n                                targetTemplate[key].afterSetValue(targetTemplate[key], rawValue);\n                            }\n                        } else if (typeof rawValue[key] != 'undefined' || rawValue[key] != null) { // skip if rawValue[key] is null or undefined\n                            // debugger;\n                            // Something goes wrong\n                        }\n                    } else {\n                        // For Object\n                        if (targetTemplate[key].groupType === 'object') {\n                            // Let FormGroup to handle value setting\n                            targetTemplate[key].setValue(rawValue[key]);\n                        } else {\n                            // Even this field is array, rawValue[key] can be null\n                            if (!rawValue[key]) continue;\n\n                            // Array\n                            // Remove all elements\n                            while (targetTemplate[key].control.controls.length > 0) {\n                                targetTemplate[key].remove(0);\n                            }\n\n                            let i = 0;\n\n                            rawValue[key].forEach(function (each) {\n                                if (\n                                    'resolveFlexibleObjectArrayConfig' in targetTemplate[key]\n                                ) {\n                                    targetTemplate[key].useConfig = targetTemplate[key].resolveFlexibleObjectArrayConfig(each);\n                                }\n\n                                targetTemplate[key].add();\n\n                                let fixForPrimitiveArray = {};\n                                fixForPrimitiveArray[key] = each;\n\n                                targetTemplate[key].children[i].setValue(\n                                    targetTemplate[key].arrayType !== 'object' ? fixForPrimitiveArray : each\n                                );\n\n                                i++;\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        return lambda;\n    }\n\n    static resolveTemplateConfigByType(attrMapping, templateObj) {\n        if (attrMapping.type === 'boolean') {\n            templateObj.renderType = attrMapping.expandOptions ? 'radio' : 'checkbox';\n        } else if (attrMapping.options) {\n            if (attrMapping.options.length > 2 && attrMapping.maxChoices) {\n                templateObj.renderType = attrMapping.expandOptions ? (\n                    attrMapping.maxChoices == 1 ?\n                        'radio' : 'checkbox'\n                ) : 'select';\n            } else {\n                templateObj.renderType = attrMapping.expandOptions ? 'radio' : 'checkbox';\n            }\n        } else {\n            templateObj.renderType = attrMapping.type;\n            if (templateObj.type === 'string') templateObj.renderType = 'text';\n        }\n\n        Ng2FormFactory.setTemplatePreset(attrMapping, templateObj);\n    }\n\n    // Copy setting from OAT to templateConfig object\n    static setTemplatePreset(attrMapping, templateObj) {\n        [\n            'label',\n            'type',\n            'useComponent',\n            'beforeSetValue',\n            'afterSetValue',\n            'resolveFlexibleObjectArrayConfig',\n            'maxChoices',\n            'expandOptions',\n            'options',\n            'hints',\n            'hide',\n            'html',\n            'renderType',\n            'arrayType',\n            'autocomplete',\n            'matExtra',\n        ].forEach(function (each) {\n            if (attrMapping.formFactory && each in attrMapping.formFactory) {\n                templateObj[each] = attrMapping.formFactory[each];\n            }\n        });\n\n        templateObj.diContainer = Ng2FormFactory.diContainer;\n    }\n}\n","import {Pipe} from \"@angular/core\";\n\n@Pipe({\n    name: 'mapToIterable'\n})\nexport class MapToIterable {\n    transform(object: Object): Array<any> {\n        let result = [];\n\n        for (let key of Object.keys(object)) {\n            if (object.hasOwnProperty(key)) {\n                result.push({key, val: object[key]});\n            }\n        }\n\n        return result;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatSelectModule } from \"@angular/material/select\";\n\nimport {\n    HbFormArrayComponent,\n    HbFormMatArrayComponent,\n    HbFormObjectComponent,\n    HbFormMatObjectComponent,\n    HbFormWidgetComponent,\n    HbFormMatWidgetComponent\n} from '../public-api';\nimport { IBaseFormConfig } from \"./class/decorators/FormConfig\";\nimport { IChoiceOptionsFormConfig } from \"./class/decorators/ChoiceOptions\";\nimport { IArrayOptionsFormConfig } from \"./class/decorators/ArrayOptions\";\nimport { MapToIterable } from \"./pipe/MapToIterable\";\n\nconst directivesAndPipes = [\n    HbFormArrayComponent,\n    HbFormMatArrayComponent,\n    HbFormObjectComponent,\n    HbFormMatObjectComponent,\n    HbFormWidgetComponent,\n    HbFormMatWidgetComponent,\n    MapToIterable,\n];\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n\n        // Material Design\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatRadioModule,\n        MatSelectModule\n    ],\n    declarations: directivesAndPipes,\n    exports: [\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatButtonToggleModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatRadioModule,\n        MatSelectModule,\n        ...directivesAndPipes,\n    ]\n})\nexport class HbFormModule {\n}\n\n// Actually template object is way more complicated. Types in here have not address all attributes but configurable only\nexport type TemplateObjectType = IBaseFormConfig | IChoiceOptionsFormConfig | IArrayOptionsFormConfig;\n\nexport interface ICustomComponent {\n    // TemplateObjectType\n    templateObject: any;\n    parentTemplateObject: any;\n}\n\nexport interface ICustomComponentConstructor {\n    new (...deps: any[]): ICustomComponent;\n}\n","/*\n * Public API Surface of hb-ng-form\n */\n\nimport 'reflect-metadata';\n\nexport * from './lib/components/hb-form-array.component';\nexport * from './lib/components/hb-form-mat-array.component';\nexport * from './lib/components/hb-form-mat-object.component';\nexport * from './lib/components/hb-form-object.component';\nexport * from './lib/components/hb-form-widget.component';\nexport * from './lib/components/hb-form-mat-widget.component';\n\nexport * from './lib/class/Ng2FormFactory';\nexport * from './lib/class/NgFormFactoryDecorators';\nexport * from './lib/class/decorators/FormConfig';\nexport * from './lib/class/decorators/ArrayOptions';\nexport * from './lib/class/decorators/ObjectOptions';\nexport * from './lib/class/decorators/AutocompleteOptions';\nexport * from './lib/class/decorators/ChoiceOptions';\nexport * from './lib/class/decorators/MultipleChoicesOptions';\nexport * from './lib/class/decorators/FlexibleObjectArray';\nexport * from './lib/class/decorators/MatExtraOptions';\n\nexport * from './lib/ObjectAttributeTypeExtractor';\nexport * from './lib/pipe/MapToIterable';\n\nexport * from './lib/HbFormModule';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Extractor"],"mappings":";;;;;;;;;;;;;;;;;;;IAuBI,+BACY,QAAkC;QAAlC,aAAQ,GAAR,QAAQ,CAA0B;KAE7C;8BAZQ,qBAAqB;IAc9B,+CAAe,GAAf;QACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YAC3C,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CACjD,IAAI,CAAC,IAAI,CAAC,YAAY,CACzB,CAAC;YACF,IAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACtD,GAAG,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC;YACxC,GAAG,CAAC,QAAQ,CAAC,oBAAoB,GAAG,IAAI,CAAC,MAAM,CAAC;YAEhD,GAAG,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;SACzC;KACJ;IAED,wCAAQ,GAAR;QACI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAErB,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE7B,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YAC/B,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAChE;aAAM,IAAI,EAAE,MAAM,YAAY,UAAU,CAAC,EAAE;YACxC,QAAQ,GAAG,OAAO,CAAC;SACtB;QAED,MAAM,GAAG,QAAQ,CAAC;QAElB,IAAI,EAAE,QAAQ,YAAY,UAAU,CAAC,EAAE;YACnC,MAAM,GAAG,IAAI,UAAU,CAAC,UAAC,CAAC;gBACtB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACjB,CAAC,CAAC,QAAQ,EAAE,CAAC;aAChB,CAAC,CAAC;SACN;QAED,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;KACjC;IAED,+CAAe,GAAf,UAAgB,GAAG;QACf,OAAO,GAAG,KAAK,MAAM,CAAA;KACxB;IAED,iDAAiB,GAAjB,UAAkB,MAAM,EAAE,MAAM;QAC5B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7D,IAAI,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC;QAE/B,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU;YACxB,KAAK,UAAU;gBACX,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBAElD,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;oBAElB,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACpE;qBAAM;oBACH,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEV,OAAO,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACnC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK;4BAAE,MAAM;qBACtD;oBAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACzB;gBAED,MAAM;YAEV,KAAK,OAAO;gBACR,IAAI,SAAS;oBAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAE1D,MAAM;SACb;KACJ;IAED,sCAAM,GAAN,UAAO,KAAK;QACR,OAAO,OAAO,KAAK,CAAC;KACvB;IAED,6CAAa,GAAb,UAAc,KAAa;QACvB,IAAI,KAAK,IAAI,uBAAqB,CAAC,OAAO,EAAE;YACxC,OAAO,uBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/C;QAED,OAAO,uBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK;aAC9C,WAAW,EAAE;aACb,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACxB,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;aACxB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KAChC;;IAhGM,6BAAO,GAAG,EAAE,CAAC;;gBAKE,wBAAwB;;IAHsB;QAAnE,SAAS,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;8DAAa;IAPvE,qBAAqB;QALjC,SAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,u1MAAwC;YACxC,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;SACpC,CAAC;yCAWwB,wBAAwB;OAVrC,qBAAqB,CAsGjC;IAAD,4BAAC;CAtGD;;;ICN0C,wCAAqB;IAA/D;;KACC;IADY,oBAAoB;QALhC,SAAS,CAAC;YACP,QAAQ,EAAE,eAAe;YACzB,8tHAAuC;YACvC,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;SACpC,CAAC;OACW,oBAAoB,CAChC;IAAD,2BAAC;CAAA,CADyC,qBAAqB;;;ICAlB,2CAAoB;IAAjE;;KACC;IADY,uBAAuB;QALnC,SAAS,CAAC;YACP,QAAQ,EAAE,mBAAmB;YAC7B,kqIAA2C;YAC3C,MAAM,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;SACpC,CAAC;OACW,uBAAuB,CACnC;IAAD,8BAAC;CAAA,CAD4C,oBAAoB;;;ICAtB,yCAAqB;IAAhE;;KACC;IADY,qBAAqB;QALjC,SAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,i0DAAyC;YACzC,MAAM,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;SAC1C,CAAC;OACW,qBAAqB,CACjC;IAAD,4BAAC;CAAA,CAD0C,qBAAqB;;;ICAlB,4CAAqB;IAAnE;;KACC;IADY,wBAAwB;QALpC,SAAS,CAAC;YACP,QAAQ,EAAE,oBAAoB;YAC9B,u/DAA6C;YAC7C,MAAM,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;SAC1C,CAAC;OACW,wBAAwB,CACpC;IAAD,+BAAC;CAAA,CAD6C,qBAAqB;;;ICArB,4CAAqB;IAAnE;;KAaC;IAZG,2CAAQ,GAAR;QACI,iBAAM,QAAQ,WAAE,CAAC;QAEjB,IACI,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM;YAC/B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EACpE;YACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAC7B,CAAA;SACJ;KACJ;IAZQ,wBAAwB;QALpC,SAAS,CAAC;YACP,QAAQ,EAAE,oBAAoB;YAC9B,y7NAA4C;YAC5C,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;SACpC,CAAC;OACW,wBAAwB,CAapC;IAAD,+BAAC;CAAA,CAb6C,qBAAqB;;;ICL/D,kBAAsB,KAAoB;QAApB,UAAK,GAAL,KAAK,CAAe;KAAI;IAE9C,sBAAI,0BAAI;aAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;OAAA;IACL,eAAC;AAAD,CAAC,IAAA;;IAEsC,qCAAQ;IAC3C,2BACc,MAAW;QADzB,YAGI,mBACoB;YACZ,QAAQ;YACR,QAAQ;YACR,SAAS;SACZ,CAAC,OAAO,CAAC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,MAAM,GAAG,KAAK,EACxD,SACJ;QATa,YAAM,GAAN,MAAM,CAAK;;KASxB;IAED,sBAAI,oCAAK;aAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;OAAA;IACL,wBAAC;AAAD,CAhBA,CAAuC,QAAQ,GAgB9C;;IAEyC,wCAAQ;IAC9C,8BACI,IAAiC,EACzB,QAAoB;IACpB,MAAkB;QADlB,yBAAA,EAAA,eAAoB;QACpB,uBAAA,EAAA,aAAkB;QAH9B,YAKI,kBAAM,IAAI,CAAC,SACd;QAJW,cAAQ,GAAR,QAAQ,CAAY;QACpB,YAAM,GAAN,MAAM,CAAY;;KAG7B;IAED,sBAAI,yCAAO;aAAX;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;OAAA;IAED,sBAAI,uCAAK;aAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;OAAA;IACL,2BAAC;AAAD,CAhBA,CAA0C,QAAQ,GAgBjD;AAID,IAAM,mBAAmB,GAAG,eAAe,CAAC;SAE5B,aAAa,CAAC,EAAqD;IAC/E,OAAO,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;AACrD,CAAC;;IAED;KA8MC;IA7MU,4CAAe,GAAtB,UACI,KAAU,EACV,OAIM;QAJN,wBAAA,EAAA,YAIM;QAEN,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpB,iBAAiB,EAAE,WAAW;YAC9B,eAAe,EAAE,KAAK;SACzB,EAAE,OAAO,CAAC,CAAC;QAEZ,IAAI,OAAO,GAAQ,EAAE,CAAC;QACtB,IAAI,MAAM,GAAQ,IAAI,CAAC;;QAGvB,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,OAAO,GAAG,IAAI,oBAAoB,CAC9B,OAAO,EACP,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAC/C,CAAC;SACL;aAAM;;YAEH,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;gBACnB,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;oBAClC,IAAI,YAAY,GAAQ,EAAE,CAAC;;oBAG3B,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;wBAChC,YAAY,GAAG,SAAS,CAAC,yBAAyB,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;;qBAG3E;yBAAM,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;wBACzC,YAAY,GAAG,IAAI,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;qBACpD;oBAED,IAAI,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE;wBACtD,OAAO,CAAC,WAAW,CACf,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAClC,CACG,KAAK,EAAE,GAAG,EAAE,YAAY,CAC3B,CAAC;qBACL;yBAAM,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,UAAU,EAAE;wBACjD,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;qBAChD;;oBAGD,OAAO,CACH,SAAS,CAAC,mBAAmB,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CACrD,GAAG,YAAY,CAAC;iBACpB;aACJ;SACJ;QAED,IACI,OAAO,KAAK,KAAK,QAAQ,EAC3B;YACE,IAAI,EAAE,KAAK,YAAY,IAAI,CAAC,IAAI,EAAE,KAAK,YAAY,KAAK,CAAC,EAAE;gBACvD,MAAM,GAAG,IAAI,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aACxD;iBAAM;gBACH,MAAM,GAAG,OAAO,CAAC;aACpB;SACJ;aAAM;YACH,MAAM,GAAG,EAAE,OAAO,SAAA,EAAE,CAAC;SACxB;QAED,IAAI,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,KAAK,CAAC,WAAW,CAAC,EAAE;YAC7D,OAAO,CAAC,WAAW,CACf,mBAAmB,EAAE,KAAK,CAAC,WAAW,CACzC,CACG,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAClC,CAAC;SACL;aAAM,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,UAAU,EAAE;YACjD,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SAC3C;QAED,OAAO,MAAM,CAAA;KAChB;IAEM,sDAAyB,GAAhC,UAAiC,MAAW,EAAE,GAAG,EAAE,OAAY;QAC3D,IAAI,YAAY,GAAG,IAAI,CAAC;;QAGxB,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;YACtB,YAAY,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;;SAG9C;aAAM,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,EAAE;YACrC,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;YAEzB,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC/B,YAAY,GAAG,IAAI,oBAAoB,CAAC,OAAO,EAAE,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;aAEtF;iBAAM;gBACH,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;aAC7D;;SAGJ;aAAM,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;YACpC,YAAY,GAAG,IAAI,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;;SAGtE;aAAM;YACH,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;SAClE;QAED,OAAO,YAAY,CAAC;KACvB;IAEM,gDAAmB,GAA1B,UAA2B,OAAY,EAAE,GAAG,EAAE,MAAW;QACrD,IAAI,SAAS,GAAG,GAAG,CAAC;;QAGpB,IAAI,OAAO,CAAC,eAAe,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAClD,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;YAE3C,IAAI,UAAU,IAAI,MAAM,EAAE;gBACtB,SAAS,GAAG,UAAU,CAAC;aAC1B;SACJ;;;QAID,IAAI,OAAO,CAAC,iBAAiB,KAAK,YAAY,EAAE;YAC5C,SAAS,GAAG,SAAS,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;SAC7D;QAED,OAAO,SAAS,CAAC;KACpB;;IAGM,gDAAmB,GAA1B,UAA2B,IAAS,EAAE,OAAY;QAC9C,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpB,iBAAiB,EAAE,WAAW;YAC9B,eAAe,EAAE,KAAK;SACzB,EAAE,OAAO,CAAC,CAAC;QAEZ,IAAI,IAAI,YAAY,KAAK,EAAE;YACvB,MAAM,GAAG,EAAE,CAAC;YAEZ,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG;gBACtB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;aAC5D,CAAC,CAAC;SACN;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACjC,MAAM,GAAG,EAAE,CAAC;YAEZ,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACnD,IAAI,QAAQ,GAAG,GAAG,CAAC;oBAEnB,IAAI,OAAO,CAAC,iBAAiB,KAAK,YAAY,EAAE;wBAC5C,QAAQ,GAAG,SAAS,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;qBACtD;oBAED,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;wBAC/B,MAAM,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;qBACxE;yBAAM;wBACH,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;qBAChC;iBACJ;aACJ;SACJ;QAED,OAAO,MAAM,CAAC;KACjB;;IAGM,gDAAmB,GAA1B,UAA2B,IAAS,EAAE,SAAmB;QAAnB,0BAAA,EAAA,cAAmB;QACrD,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,IAAI,IAAI,YAAY,KAAK,EAAE;YACvB,MAAM,GAAG,EAAE,CAAC;YAEZ,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG;gBACtB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;aACnD,CAAC,CAAC;SACN;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACjC,MAAM,GAAG,EAAE,CAAC;YAEZ,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;gBAClB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;oBAC/B,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;wBAC3B,MAAM,CAAC,GAAG,CAAC;4BACP,MAAM,IAAI,SAAS;gCACnB,SAAS,CAAC,IAAI,YAAY,QAAQ;gCAC9B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;qBAC/D;yBAAM;wBACH,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC1D;iBACJ;qBAAM,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;oBACxC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC3B;aACJ;SACJ;QAED,OAAO,MAAM,CAAC;KACjB;IAEM,qDAAwB,GAA/B,UAAgC,KAAK;QACjC,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAEjE,OAAO,MAAM,CAAC;KACf;IACL,mCAAC;AAAD,CAAC,IAAA;AAED,IAAI,SAAS,GAAG,4BAA4B;;IC3O/B,gBAAgB,GAAG,MAAM,CAAC,YAAY,EAAE;SAErC,UAAU,CAAC,OAAwB;IAC/C,IAAI,IAAI,GAAG,IAAI,CAAC;IAEhB,IAAI,OAAO,CAAC,KAAK,EAAE;QACf,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE;aAC7B,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACxB,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;aACxB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;KAChC;IAED,OAAO,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACpC,MAAM,CAAC,MAAM,CAAC;QACV,WAAW,EAAE,KAAK;QAClB,IAAI,MAAA;KACP,EAAE,OAAO,CAAC,CACd,CAAC;AACN;;ICtCa,kBAAkB,GAAG,MAAM,CAAC,yBAAyB,EAAE;SAEpD,YAAY,CAAC,OAAgC;IACzD,OAAO,OAAO,CAAC,QAAQ,CACnB,kBAAkB,EAClB,MAAM,CAAC,MAAM,CACgB,EACxB,EAAE,OAAO,CACb,CACJ,CAAC;AACN;;ICXa,mBAAmB,GAAG,MAAM,CAAC,0BAA0B,EAAE;SAEtD,aAAa,CAAC,OAAiC;IAC3D,OAAO,OAAO,CAAC,QAAQ,CACnB,mBAAmB,EACnB,MAAM,CAAC,MAAM,CACiB,EACzB,EAAE,OAAO,CACb,CACJ,CAAC;AACN;;ICFa,kBAAkB,GAAG,MAAM,CAAC,sBAAsB,EAAE;SAEjD,mBAAmB,CAAC,OAA6B;IAC7D,OAAO,OAAO,CAAC,QAAQ,CACnB,kBAAkB,EAAE;QAChB,YAAY,EAAE,MAAM,CAAC,MAAM,CACD,EACrB,EAAE,OAAO,CACb;KACJ,CACJ,CAAC;AACN;;ICRa,mBAAmB,GAAG,MAAM,CAAC,0BAA0B,EAAE;SAEtD,aAAa,CAAC,OAAiC;IAC3D,OAAO,OAAO,CAAC,QAAQ,CACnB,mBAAmB,EACnB,MAAM,CAAC,MAAM,CAAC;QACN,UAAU,EAAE,CAAC;KAChB,EACyB;QACtB,UAAU,EAAE,QAAQ;KACvB,EAAE,OAAO,CACb,CACJ,CAAC;AACN;;;ICnBI,uBAAY,MAAe;QAL3B,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAC5B,eAAU,GAAG,UAAU,CAAC;QACxB,YAAO,GAAG,EAAE,CAAC;QAGT,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC7B;IACL,oBAAC;AAAD,CAAC,IAAA;IAYY,4BAA4B,GAAG,MAAM,CAAC,mCAAmC,EAAE;SAExE,sBAAsB,CAAC,OAA0C;IAC7E,OAAO,OAAO,CAAC,QAAQ,CACnB,4BAA4B,EAC5B,MAAM,CAAC,MAAM,CAAC;QACN,SAAS,EAAE,MAAM;KACpB,EACkC;QAC/B,UAAU,EAAE,IAAI;KACnB,EAAE,OAAO,CACb,CACJ,CAAC;AACN;;IC3Ba,yBAAyB,GAAG,MAAM,CAAC,gCAAgC,EAAE;SAElE,mBAAmB,CAAC,OAAuC;IACvE,OAAO,OAAO,CAAC,QAAQ,CACnB,yBAAyB,EACzB,MAAM,CAAC,MAAM,CACT;QACI,aAAa,EAAE,KAAK;KACvB,EAAE,OAAO,EAAE;QACR,SAAS,EAAE,QAAQ;KACtB,CACJ,CACJ,CAAC;AACN;;IChBa,qBAAqB,GAAG,MAAM,CAAC,4BAA4B,EAAE;SAE1D,eAAe,CAAC,OAAmC;IAC/D,OAAO,OAAO,CAAC,QAAQ,CACnB,qBAAqB,EACrB,MAAM,CAAC,MAAM,CACmB,EAC3B,EAAE,OAAO,CACb,CACJ,CAAC;AACN;;SCRgB,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ;IAC/C,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;QACvB,QAAQ,CAAC,WAAW,GAAG,EAAE,CAAC;QAC1B;YACI,gBAAgB;YAChB,kBAAkB;YAClB,mBAAmB;YACnB,mBAAmB;YACnB,4BAA4B;YAC5B,yBAAyB;YACzB,kBAAkB;YAClB,qBAAqB;SACxB,CAAC,OAAO,CAAC,UAAC,UAAU;YACjB,IAAI,eAAe,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAE3C,IAAI,GAAG,EAAE;gBACL,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC7B;YAED,IACI,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,EACrD;gBACE,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EACnC,QAAQ,CAAC,WAAW,EACpB,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,eAAe,CAAC,CACtD,CAAC;aACL;SACJ,CAAC,CAAC;KACN;AACL,CAAC;SAEe,WAAW;IACvB,OAAO,aAAa,CAAC,aAAa,CAAC,CAAC;AACxC;;;IC9BA;KAqYC;IApYU,wCAAyB,GAAhC,UACI,WAAwB,EACxB,MAAW,EACX,cAGQ,EACR,OAAiB;QAJjB,+BAAA,EAAA,qBAGQ;QACR,wBAAA,EAAA,YAAiB;QAEjB,OAAO,cAAc,CAAC,6BAA6B,CAC/C,WAAW,EAAEA,4BAAS,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,cAAc,CAC1E,CAAC;KACL;IAIM,4BAAa,GAApB,UAAqB,GAAG;QACpB,IAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAEpE,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC/D;IAEM,4CAA6B,GAApC,UACI,WAAwB,EACxB,sBAA2B;IAC3B,cAAgG,EAChG,oBAAsG;QADtG,+BAAA,EAAA,qBAAgG;QAChG,qCAAA,EAAA,2BAAsG;QAEtG,IAAI,MAAM,GAAQ;YACd,aAAa,EAAE,EAAE;YACjB,cAAc,EAAE,EAAE;SACrB,CAAC;QACF,IAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1F,IAAI,WAAW,GAAG,kBAAkB,GAAG,sBAAsB,CAAC,QAAQ,GAAG,sBAAsB,CAAC;QAEhG,KAAK,IAAI,GAAG,IAAI,WAAW,EAAE;;YAEzB,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAAE,SAAS;YAEvC,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,IAAI,qBAAqB,GAAG,IAAI,CAAC;YACjC,IAAI,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;;YAG/B,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;gBACjD,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,EAAE;oBAC3B,QAAQ,GAAG,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;iBACpE;qBAAM;;oBAEH,IAAI,KAAK,GAAG,cAAc,CAAC,mCAAmC,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC,EAAE,CAAC;oBAE5F,QAAQ,GAAG;wBACP,SAAS,EAAE,QAAQ;wBACnB,OAAO,EAAE,KAAK,CAAC,aAAa,YAAY,SAAS;4BAC7C,KAAK,CAAC,aAAa,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,aAAa,EAAE,cAAc,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC;wBACpH,QAAQ,EAAE,KAAK,CAAC,cAAc;qBACjC,CAAC;iBACL;aACJ;;iBAEI,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE;gBAC9B,IAAI,OAAO,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,KAAK,IAAI,WAAW,EAAE;oBAC5D,IAAA,kDAA6E,EAA3E,0BAAU,EAAE,gCAA+D,CAAC;oBAElF,qBAAqB,GAAG;wBACpB,IAAI,EAAE,OAAO,CAAC,KAAK;wBACnB,OAAO,EAAE,IAAI,WAAW,CAAC,aAAa,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,EAAE,UAAU,CAAC;qBAC5E,CAAC;iBACL;qBAAM;oBACH,QAAQ,GAAG,oBAAoB,GAAG,oBAAoB,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;iBAC/E;aACJ;;iBAEI;gBACD,QAAQ,GAAG,cAAc,GAAG,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;aACnE;;YAGD,IAAI,CAAC,qBAAqB,IAAI,CAAC,QAAQ,EAAE;gBAC/B,IAAA,qEAAU,CAAmD;gBAEnE,QAAQ,GAAG;oBACP,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE,MAAM;oBAClB,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC;iBAC3C,CAAC;aACL;;YAGD,IAAI,QAAQ,EAAE;gBACV,qBAAqB,GAAG,QAAQ,CAAC;aACpC;YAED,qBAAqB,CAAC,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAChE,qBAAqB,CAAC,QAAQ,GAAG,cAAc,CAAC,iCAAiC,CAAC,qBAAqB,CAAC,CAAC;YACzG,cAAc,CAAC,2BAA2B,CACtC,OAAO,EAAE,qBAAqB,CACjC,CAAC;YAEF,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,qBAAqB,CAAC,OAAO,CAAC;YAC1D,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,qBAAqB,CAAC;SACtD;QAED,MAAM,CAAC,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,iCAAiC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAEzG,IAAI,kBAAkB,EAAE;YACpB,MAAM,CAAC,cAAc,GAAG;gBACpB,SAAS,EAAE,sBAAsB,CAAC,IAAI;gBACtC,QAAQ,EAAE,MAAM,CAAC,cAAc;aAClC,CAAC;YAEF,cAAc,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;SACnF;QAED,OAAO,MAAM,CAAC;KACjB;IAEM,oCAAqB,GAA5B,UAA6B,OAAY;QACrC,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,GAAG,EAAE,EACxG,aAAa,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAErE,UAAU,GAAG,OAAO,UAAU,KAAK,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC;QAEpG,IAAI,aAAa,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;YAAE,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEnF,OAAO,EAAE,UAAU,YAAA,EAAE,aAAa,eAAA,EAAE,CAAC;KACxC;IAEc,kDAAmC,GAAlD,UACI,YAAiB,EACjB,GAAW,EACX,WAAwB,EACxB,KAAqB;QAArB,sBAAA,EAAA,aAAqB;QAErB,IAAM,MAAM,GAAG;YACX,IAAI,OAAO,GAAG,IAAI,CAAC;YAEnB,IAAI,KAAK,EAAE;;gBAEP,OAAO,GAAG,IAAI,oBAAoB,CAC9B,OAAO,EACPA,4BAAS,CAAC,eAAe,CACrB,IAAI,YAAY,EAAE,CACrB,CACJ,CAAC;aACL;iBAAM;gBACH,OAAO,GAAG,YAAY,CAAC;aAC1B;YAED,IAAI,UAAU,GAAG,IAAI,CAAC;YAEtB,IACI,MAAM,IAAI,OAAO,CAAC,QAAQ;gBAC1B;oBACI,KAAK;oBACL,QAAQ;oBACR,SAAS;oBACT,QAAQ;oBACR,MAAM;oBACN,EAAE;iBACL,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EACvC;;gBAEE,IAAI,OAAO,GAAG,IAAI,WAAW,CACzB,OAAO,IAAI,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,EACzD,CAAC,UAAU,CAAC,QAAQ,CAAC,CACxB,EAAE,cAAc,GAAG,EAAE,CAAC;gBAEvB,cAAc,CAAC,GAAG,CAAC,GAAG;oBAClB,KAAK,EAAE,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC;oBACxC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;oBAC3B,OAAO,SAAA;iBACV,CAAC;gBAEF,UAAU,GAAG;oBACT,aAAa,EAAE,OAAO;oBACtB,cAAc,gBAAA;iBACjB,CAAC;gBAEF,cAAc,CAAC,2BAA2B,CACtC,OAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,GAAG,CAAC,CACxC,CAAC;aACL;iBAAM;;gBAEH,UAAU,GAAG,cAAc,CAAC,6BAA6B,CAAC,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;aAC5F;YAED,UAAU,CAAC,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,iCAAiC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAEjH,IAAI,aAAa,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,WAAW,CAAC,QAAQ,KAAK,UAAU,EAAE;gBAChF,OAAO,CAAC,WAAW,CAAC,QAAQ,CACxB,UAAU,CAAC,cAAc,EAAE,cAAc,CAAC,WAAW,CACxD,CAAC;aACL;YAED,OAAO;gBACH,aAAa,EACT,UAAU,CAAC,aAAa,YAAY,WAAW,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ;oBACxE,UAAU,CAAC,aAAa;;oBAExB,IAAI,SAAS,CAAC,UAAU,CAAC,aAAa,EAAE,cAAc,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;gBAC5G,cAAc,EAAE,UAAU,CAAC,cAAc;aAC5C,CAAC;SACL,CAAC;QAEF,OAAO,MAAM,CAAC;KACjB;IAEc,0BAAW,GAA1B,UAA2B,OAAY,EAAE,GAAW,EAAE,WAAwB;QAC1E,IAAI,kBAAkB,GAAG,IAAI,SAAS,CAAC,EAAE,EAAE,cAAc,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC;QACrG,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,IAAI,MAAM,GAAG;YACT,SAAS,EAAE,OAAO;YAClB,SAAS,EACL,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,SAAS;gBAChD,SAAS;gBACT,MAAM,IAAI,OAAO,CAAC,QAAQ;oBACtB,WAAW,GAAG,QAAQ;YAElC,OAAO,EAAE,kBAAkB;YAC3B,QAAQ,EAAE,EAAE;YACZ,kBAAkB,EAAC,EAAE;YACrB,SAAS,EAAE,CAAC;YACZ,GAAG,EAAE,IAAI;YACT,MAAM,EAAE,IAAI;SACf,CAAC;QAEF,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE;YAC9D,IAAI,GAAC,GAAG,CAAC,CAAC;YACV,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,IAAI;gBACxD,YAAY,CAAC,GAAC,CAAC,GAAG,cAAc,CAAC,mCAAmC,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;gBAC5G,MAAM,CAAC,kBAAkB,CAAC,GAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gBAC1C,GAAC,IAAI,CAAC,CAAC;aACV,CAAC,CAAC;SACN;aAAM;YACH,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,mCAAmC,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,CAAC,CAAA;SAClG;QAED,IAAI,GAAG,GAAG;YACF,IAAI,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YAEnD,IAAM,OAAO,GAAc,kBAAkB,CAAC;YAC9C,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAEjD,WAAW,CAAC,cAAc,CAAC,sBAAsB,GAAG,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAEhG,IAAI,aAAa,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,WAAW,CAAC,MAAM,KAAK,UAAU,EAAE;gBAC9E,OAAO,CAAC,WAAW,CAAC,MAAM,CACtB,WAAW,CAAC,cAAc,EAAE,cAAc,CAAC,WAAW,CACzD,CAAC;aACL;SACJ,EACD,MAAM,GAAG,UAAU,CAAS;YACxB,IAAM,OAAO,GAAc,kBAAkB,CAAC;YAC9C,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAChC,CAAC;QAEN,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;;QAIvB,OAAO,MAAM,CAAC;KACjB;IAEM,gDAAiC,GAAxC,UAAyC,cAAc;QACnD,IAAM,MAAM,GAAG,UAAU,QAAQ;;gBAEzB,IAAI,cAAc,GAAG,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC;gBAEzF,IAAI,GAAG,IAAI,cAAc,EAAE;oBACvB,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;wBAC1B,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,EAAE;4BAClC,IACI,gBAAgB,IAAI,cAAc,CAAC,GAAG,CAAC,EACzC;gCACE,cAAc,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;6BACrE;4BAED,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ;;4BAEhC,QAAQ,CAAC,GAAG,CAAC,CAChB,CAAC;4BAEF,IACI,eAAe,IAAI,cAAc,CAAC,GAAG,CAAC,EACxC;gCACE,cAAc,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;6BACpE;yBACJ;6BAAM,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,WAAW,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;;;yBAGxE;qBACJ;yBAAM;;wBAEH,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,QAAQ,EAAE;;4BAE5C,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;yBAC/C;6BAAM;;4BAEH,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;kDAAW;;;4BAI7B,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gCACpD,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;6BACjC;4BAED,IAAI,GAAC,GAAG,CAAC,CAAC;4BAEV,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI;gCAChC,IACI,kCAAkC,IAAI,cAAc,CAAC,GAAG,CAAC,EAC3D;oCACE,cAAc,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,gCAAgC,CAAC,IAAI,CAAC,CAAC;iCAC9F;gCAED,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCAE1B,IAAI,oBAAoB,GAAG,EAAE,CAAC;gCAC9B,oBAAoB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;gCAEjC,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC,QAAQ,CACpC,cAAc,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,QAAQ,GAAG,oBAAoB,GAAG,IAAI,CAC3E,CAAC;gCAEF,GAAC,EAAE,CAAC;6BACP,CAAC,CAAC;yBACN;qBACJ;iBACJ;;YA/DL,KAAK,IAAI,GAAG,IAAI,QAAQ;;aAgEvB;SACJ,CAAA;QAED,OAAO,MAAM,CAAC;KACjB;IAEM,0CAA2B,GAAlC,UAAmC,WAAW,EAAE,WAAW;QACvD,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE;YAChC,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,aAAa,GAAG,OAAO,GAAG,UAAU,CAAC;SAC7E;aAAM,IAAI,WAAW,CAAC,OAAO,EAAE;YAC5B,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,UAAU,EAAE;gBAC1D,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,aAAa,IAC9C,WAAW,CAAC,UAAU,IAAI,CAAC;oBACvB,OAAO,GAAG,UAAU,IACxB,QAAQ,CAAC;aAChB;iBAAM;gBACH,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,aAAa,GAAG,OAAO,GAAG,UAAU,CAAC;aAC7E;SACJ;aAAM;YACH,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC;YAC1C,IAAI,WAAW,CAAC,IAAI,KAAK,QAAQ;gBAAE,WAAW,CAAC,UAAU,GAAG,MAAM,CAAC;SACtE;QAED,cAAc,CAAC,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;KAC9D;;IAGM,gCAAiB,GAAxB,UAAyB,WAAW,EAAE,WAAW;QAC7C;YACI,OAAO;YACP,MAAM;YACN,cAAc;YACd,gBAAgB;YAChB,eAAe;YACf,kCAAkC;YAClC,YAAY;YACZ,eAAe;YACf,SAAS;YACT,OAAO;YACP,MAAM;YACN,MAAM;YACN,YAAY;YACZ,WAAW;YACX,cAAc;YACd,UAAU;SACb,CAAC,OAAO,CAAC,UAAU,IAAI;YACpB,IAAI,WAAW,CAAC,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC5D,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACrD;SACJ,CAAC,CAAC;QAEH,WAAW,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;KACxD;IArXM,0BAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IAsXnC,qBAAC;CArYD;;;ICTA;KAYC;IAXG,iCAAS,GAAT,UAAU,MAAc;;QACpB,IAAI,MAAM,GAAG,EAAE,CAAC;;YAEhB,KAAgB,IAAA,KAAA,SAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,gBAAA,4BAAE;gBAAhC,IAAI,GAAG,WAAA;gBACR,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAC5B,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,KAAA,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;iBACxC;aACJ;;;;;;;;;QAED,OAAO,MAAM,CAAC;KACjB;IAXQ,aAAa;QAHzB,IAAI,CAAC;YACF,IAAI,EAAE,eAAe;SACxB,CAAC;OACW,aAAa,CAYzB;IAAD,oBAAC;CAZD;;ACuBA,IAAM,kBAAkB,GAAG;IACvB,oBAAoB;IACpB,uBAAuB;IACvB,qBAAqB;IACrB,wBAAwB;IACxB,qBAAqB;IACrB,wBAAwB;IACxB,aAAa;CAChB,CAAC;;IAsCF;KACC;IADY,YAAY;QApCxB,QAAQ,CAAC;YACN,OAAO,EAAE;gBACL,WAAW;gBACX,mBAAmB;;gBAGnB,uBAAuB;gBACvB,qBAAqB;gBACrB,eAAe;gBACf,qBAAqB;gBACrB,aAAa;gBACb,iBAAiB;gBACjB,mBAAmB;gBACnB,kBAAkB;gBAClB,cAAc;gBACd,mBAAmB;gBACnB,cAAc;gBACd,eAAe;aAClB;YACD,YAAY,EAAE,kBAAkB;YAChC,OAAO;gBACH,uBAAuB;gBACvB,qBAAqB;gBACrB,eAAe;gBACf,qBAAqB;gBACrB,aAAa;gBACb,iBAAiB;gBACjB,mBAAmB;gBACnB,kBAAkB;gBAClB,cAAc;gBACd,mBAAmB;gBACnB,cAAc;gBACd,eAAe;eACZ,kBAAkB,CACxB;SACJ,CAAC;OACW,YAAY,CACxB;IAAD,mBAAC;CADD;;AC1EA;;;;ACAA;;;;;;"}