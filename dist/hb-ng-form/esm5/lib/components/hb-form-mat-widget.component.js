import { __decorate, __extends } from "tslib";
import { HbFormWidgetComponent } from "./hb-form-widget.component";
import { Component } from "@angular/core";
var HbFormMatWidgetComponent = /** @class */ (function (_super) {
    __extends(HbFormMatWidgetComponent, _super);
    function HbFormMatWidgetComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HbFormMatWidgetComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.parent.arrayType == 'enum' &&
            this.parent.control.value.indexOf(this.data.options[0].value) > -1) {
            this.data.control.setValue(this.data.options[0].value);
        }
    };
    HbFormMatWidgetComponent = __decorate([
        Component({
            selector: 'hb-mat-form-widget',
            template: "<div *ngIf=\"\n         data.control != undefined &&\n         (\n             data.groupType == undefined ||\n             parent.arrayType == 'enum'\n         ) &&\n         key != 'setValue' &&\n         (\n             data.hide == undefined ||\n             !data.hide\n         )\n     \"\n     [ngClass]=\"{\n         'error': !data.control.valid,\n         'hb-form-with-hints' : data.hints\n     }\"\n     class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }} {{ data?.html?.classAttr }}\"\n>\n    <ng-template #customBlock></ng-template>\n\n    <ng-container *ngIf=\"\n        !data.useComponent &&\n        parent?.arrayType !== 'enum'\n    \">\n        <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n            <mat-form-field *ngIf=\"data.selectOptionsObservables == undefined; else autocompleteBlock\" class=\"hb-form-widget-input-field\">\n                <div class=\"form-field-prefix\"\n                     matPrefix\n                     *ngIf=\"data?.matExtra?.matPrefix\"\n                     [innerHtml]=\"data.matExtra.matPrefix\"\n                ></div>\n\n                <input matInput\n                       [attr.id]=\"(key ? key : data.slug) + '-input'\"\n                       [type]=\"data.renderType ? data.renderType : 'text'\"\n                       (change)=\"data.control.patchValue($event.target.value)\"\n                       [placeholder]=\"data.label !== undefined ? data.label : null\"\n                       [formControl]=\"data.control\" />\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n\n                <div class=\"form-field-suffix\"\n                     matSuffix\n                     *ngIf=\"data?.matExtra?.matSuffix\"\n                     [innerHtml]=\"data.matExtra.matSuffix\"></div>\n            </mat-form-field>\n\n            <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n                <mat-form-field *ngIf=\"data.autocomplete.renderType != 'custom';\">\n<!--                  else autocompleteCustomizeBlock-->\n                    <input matInput\n                           [attr.id]=\"key ? key : data.slug + '-input'\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           (change)=\"data.control.patchValue($event.target.value);\"\n                           placeholder=\"{{ data.label !== undefined ? data.label : data.option.name }}\"\n                           [formControl]=\"data.control\"\n                           [matAutocomplete]=\"auto\" />\n\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">\n                            <span>{{ option.label }}</span>\n                        </mat-option>\n                    </mat-autocomplete>\n\n                    <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                        <strong>\n                            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                        </strong>\n                    </mat-hint>\n                </mat-form-field>\n            </ng-template>\n        </ng-container>\n\n        <mat-form-field *ngIf=\"data.renderType === 'textarea'\">\n            <textarea matInput rows=\"5\" [formControl]=\"data.control\"\n                      [placeholder]=\"data.label ? data.label : data.option.name\"\n                      [attr.id]=\"key ? key : data.slug + '-input'\">\n            </textarea>\n\n            <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                <strong>\n                    {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                </strong>\n            </mat-hint>\n        </mat-form-field>\n    </ng-container>\n\n    <ng-container *ngIf=\"!data.useComponent && ['radio', 'checkbox', 'select'].indexOf(data.renderType) > -1\">\n        <div *ngIf=\"data.renderType != 'select'; else selectBlock\">\n            <mat-radio-group *ngIf=\"data.renderType == 'radio'; else checkBoxBlock\" [formControl]=\"data.control\">\n                <mat-radio-button\n                    class=\"example-radio-button\"\n                    *ngFor=\"let option of data.options\"\n                    [value]=\"option.value\"\n                    [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                    [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.slug) + '-input' : null\"\n                    (change)=\"updateParentValue($event, option)\"\n                >\n                    {{ option.name }}\n                </mat-radio-button>\n            </mat-radio-group>\n\n            <ng-template #checkBoxBlock>\n                <ng-container *ngIf=\"parent?.arrayType == 'enum'; else booleanCheckbox\">\n                    <mat-checkbox\n                        *ngFor=\"let option of data.options\"\n                        [value]=\"option.value\"\n                        [checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                        (change)=\"updateParentValue($event, option)\"\n                        [formControl]=\"data.control\"\n                    >\n                        {{ option.name }}\n                    </mat-checkbox>\n                </ng-container>\n\n                <ng-template #booleanCheckbox>\n                    <label>{{ data.label }}</label>\n                    <mat-checkbox [checked]=\"data.control.value ? true : null\"\n                                  (change)=\"data.control.patchValue($event.source.checked)\">\n                    </mat-checkbox>\n                </ng-template>\n            </ng-template>\n        </div>\n\n        <ng-template #selectBlock>\n            <mat-form-field>\n                <mat-select\n                    *ngIf=\"data.renderType == 'select'\"\n                    [formControl]=\"data.control\"\n                    [placeholder]=\"data.label != undefined ? data.label : null\"\n                >\n                    <mat-option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </mat-option>\n                </mat-select>\n\n                <mat-hint align=\"start\" *ngIf=\"data?.hints\">\n                    <strong>\n                        {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer, data, parent) : data.hints }}\n                    </strong>\n                </mat-hint>\n            </mat-form-field>\n        </ng-template>\n    </ng-container>\n</div>\n",
            inputs: ['data', 'key', 'parent']
        })
    ], HbFormMatWidgetComponent);
    return HbFormMatWidgetComponent;
}(HbFormWidgetComponent));
export { HbFormMatWidgetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGItZm9ybS1tYXQtd2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2hiLW5nLWZvcm0vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9oYi1mb3JtLW1hdC13aWRnZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBT2xEO0lBQThDLDRDQUFxQjtJQUFuRTs7SUFhQSxDQUFDO0lBWkcsMkNBQVEsR0FBUjtRQUNJLGlCQUFNLFFBQVEsV0FBRSxDQUFDO1FBRWpCLElBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTTtZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUNwRTtZQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUM3QixDQUFBO1NBQ0o7SUFDTCxDQUFDO0lBWlEsd0JBQXdCO1FBTHBDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIseTdOQUE0QztZQUM1QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQztTQUNwQyxDQUFDO09BQ1csd0JBQXdCLENBYXBDO0lBQUQsK0JBQUM7Q0FBQSxBQWJELENBQThDLHFCQUFxQixHQWFsRTtTQWJZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhiRm9ybVdpZGdldENvbXBvbmVudCB9IGZyb20gXCIuL2hiLWZvcm0td2lkZ2V0LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2hiLW1hdC1mb3JtLXdpZGdldCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hiLWZvcm0tbWF0LXdpZGdldC50cGwuaHRtbCcsXG4gICAgaW5wdXRzOiBbJ2RhdGEnLCAna2V5JywgJ3BhcmVudCddXG59KVxuZXhwb3J0IGNsYXNzIEhiRm9ybU1hdFdpZGdldENvbXBvbmVudCBleHRlbmRzIEhiRm9ybVdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuYXJyYXlUeXBlID09ICdlbnVtJyAmJlxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY29udHJvbC52YWx1ZS5pbmRleE9mKHRoaXMuZGF0YS5vcHRpb25zWzBdLnZhbHVlKSA+IC0xXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbnRyb2wuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm9wdGlvbnNbMF0udmFsdWVcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==