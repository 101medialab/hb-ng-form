var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { HbFormWidget } from "./HbFormWidget";
import { Component } from "@angular/core";
var HbMdFormWidget = /** @class */ (function (_super) {
    __extends(HbMdFormWidget, _super);
    function HbMdFormWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HbMdFormWidget.decorators = [
        { type: Component, args: [{
                    selector: 'hb-md-form-widget',
                    template: "\n        <div *ngIf=\"\n                data.control != undefined && \n                (\n                    data.groupType == undefined || \n                    parent.arrayType == 'enum'\n                ) && \n                key != 'setValue' && (\n                    data.hide == undefined ||  \n                    !data.hide\n                )\n            \" [ngClass]=\"{ 'error': !data.control.valid }\" class=\"expand-to-child hb-form-widget hb-form-widget_{{ key }}\">\n            <ng-template #customBlock></ng-template>\n\n            <ng-container *ngIf=\"(\n                !data.useComponent && \n                data.expandOptions == undefined\n            ) || (\n                parent?.arrayType === 'enum'\n            )\">\n                <ng-container *ngIf=\"['select', 'radio', 'checkbox', 'textarea'].indexOf(data.renderType) === -1\">\n                    <md-form-field *ngIf=\"\n                        (\n                            parent?.arrayType === 'enum' || \n                            data.selectOptionsObservables == undefined\n                        ); else autocompleteBlock\n                    \" class=\"hb-form-widget-input-field\">\n                        <input mdInput\n                               [attr.id]=\"key ? key : data.label.slugify() + '-input'\"\n                               [type]=\"data.renderType ? data.renderType : 'text'\"\n                               [attr.checked]=\"\n                                   parent?.arrayType === 'enum' && \n                                   parent.control.value.indexOf(data.option.value) > -1 ?\n                                       true : null\n                               \"\n                               (change)=\"\n                                   parent?.arrayType === 'enum' ?\n                                       updateParentValue($event, data.option) :\n                                       data.control.patchValue(\n                                           data.renderType === 'checkbox' ? $event.target.checked : $event.target.value\n                                       );\n                               \"\n                               placeholder=\"\n                                   {{ data.renderType !== 'checkbox' || data.label !== undefined ? data.label : data.option.name }}\n                               \"\n                               [formControl]=\"data.control\" />\n\n                        <md-hint align=\"start\" *ngIf=\"data?.hints\">\n                            <strong>\n                                {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n                            </strong>\n                        </md-hint>\n                    </md-form-field>\n\n                    <ng-template #autocompleteBlock [ngIf]=\"data.autocomplete != undefined\">\n                        <md-form-field *ngIf=\"data.autocomplete.renderType != 'custom'; else autocompleteCustomizeBlock\">\n                            <input mdInput\n                                   [attr.id]=\"key ? key : data.label.slugify() + '-input'\"\n                                   [type]=\"data.renderType ? data.renderType : 'text'\"\n                                   (change)=\"\n                                       data.control.patchValue(\n                                           $event.target.value\n                                       );\n                                   \"\n                                   placeholder=\"\n                                       {{ data.label !== undefined ? data.label : data.option.name }}\n                                   \"\n                                   [formControl]=\"data.control\"\n                                   [mdAutocomplete]=\"auto\" />\n\n                            <md-autocomplete #auto=\"mdAutocomplete\">\n                                <md-option *ngFor=\"let option of data.selectOptionsObservables | async\" [value]=\"option.value\">\n                                    <span>{{ option.label }}</span>\n                                </md-option>\n                            </md-autocomplete>\n\n                            <md-hint align=\"start\" *ngIf=\"data?.hints\">\n                                <strong>\n                                    {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n                                </strong>\n                            </md-hint>\n                        </md-form-field>\n                    </ng-template>\n                </ng-container>\n\n                <md-form-field *ngIf=\"data.renderType === 'textarea'\">\n                    <textarea mdInput rows=\"5\" [formControl]=\"data.control\" placeholder=\"\n                                  {{ data.label ? data.label : data.option.name }}\n                              \" [attr.id]=\"key ? key : data.label.slugify() + '-input'\">\n                    </textarea>\n\n                    <md-hint align=\"start\" *ngIf=\"data?.hints\">\n                        <strong>\n                            {{ typeof(data.hints) == 'function' ? data.hints(data.diContainer) : data.hints }}\n                        </strong>\n                    </md-hint>\n                </md-form-field>    \n            </ng-container>\n\n            <ng-container *ngIf=\"!data.useComponent && ['radio', 'checkbox', 'select'].indexOf(data.renderType) > -1\">\n                <div *ngIf=\"['radio', 'checkbox'].indexOf(data.renderType) > -1; else select\">\n                    <md-radio-group\n                        *ngIf=\"data.renderType == 'radio'; else checkbox\"\n                        [formControl]=\"data.control\">\n                        <md-radio-button\n                            class=\"example-radio-button\"\n                            *ngFor=\"let option of data.options\"\n                            [value]=\"option.value\"\n                            [attr.checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                            [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.label.slugify()) + '-input' : null\"\n                            (change)=\"updateParentValue($event, option)\"\n                        >\n                            {{ option.name }}\n                        </md-radio-button>\n                    </md-radio-group>\n\n                    <ng-template #checkbox>\n                        <md-checkbox\n                            *ngFor=\"let option of data.options\"\n                            [value]=\"option.value\"\n                            [attr.checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                            (change)=\"updateParentValue($event, option)\"\n                            [formControl]=\"data.control\"\n                        >\n                            {{ option.name }}\n                        </md-checkbox>\n                    </ng-template>\n                </div>\n                \n                <ng-template #select>\n                    <label *ngIf=\"data.label != ''\">{{ data.label }}</label>\n                    <md-select\n                        *ngIf=\"data.renderType == 'select'\"\n                        [formControl]=\"data.control\"\n                    >\n                        <md-option *ngFor=\"let option of resolvedOptions | async\" [value]=\"option.value\">\n                            {{ option.name ? option.name : option.value }}\n                        </md-option>\n                    </md-select>\n                </ng-template>\n            </ng-container>\n        </div>\n    ",
                    inputs: ['data', 'key', 'parent']
                },] },
    ];
    /** @nocollapse */
    HbMdFormWidget.ctorParameters = function () { return []; };
    return HbMdFormWidget;
}(HbFormWidget));
export { HbMdFormWidget };
//# sourceMappingURL=HbMdFormWidget.js.map