[{"__symbolic":"module","version":4,"metadata":{"HbFormWidget":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"hb-ng-sdk","name":"BaseClass"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"hb-form-widget","template":"\n        <div *ngIf=\"\n                data.control != undefined && \n                data.groupType == undefined && \n                key != 'setValue' && (\n                    data.hide == undefined ||  \n                    !data.hide\n                )\n            \"\n            [ngClass]=\"{ 'error': !data.control.valid }\" class=\"expand-to-child hb-form-widget\">\n            <ng-template #customBlock></ng-template>\n\n            <div *ngIf=\"!data.useComponent && data.expandOptions == undefined\">\n                <label for=\"{{ key ? key : data.label.slugify() }}-input\">{{ data.renderType !== 'checkbox' || data.label !== undefined ? data.label : data.option.name }}</label>\n        \n                <div class=\"input-control-container\">\n                    \n              \n                    <input id=\"{{ key ? key : data.label.slugify() }}-input\"\n                           *ngIf=\"!data.renderType || ['select', 'textarea'].indexOf(data.renderType) === -1\"\n                           [type]=\"data.renderType ? data.renderType : 'text'\"\n                           [attr.checked]=\"\n                               parent?.arrayType === 'enum' && parent.control.value.indexOf(data.options[0].value) > -1 ? true : null\n                           \"\n                           (change)=\"\n                               parent?.arrayType === 'enum' ?\n                                   updateParentValue($event, data.option) :\n                                   data.control.patchValue(\n                                       data.renderType === 'checkbox' ? $event.target.checked : $event.target.value\n                                   );\n                           \"\n                           placeholder=\"{{ data.label }}\" [formControl]=\"data.control\"/>\n        \n                    <textarea *ngIf=\"data.renderType === 'textarea'\" [formControl]=\"data.control\"\n                              id=\"{{ key ? key : data.label.slugify() }}-input\" rows=\"5\"></textarea>\n        \n                    <span class=\"hints\" *ngIf=\"data?.hints\">\n                        {{ data.hints }}\n                    </span>\n                </div>\n            </div>\n        \n            <div *ngIf=\"!data.useComponent && data.renderType && data.expandOptions != undefined\" class=\"options-group\">\n                <div *ngIf=\"data.renderType != 'select'\">\n                    <div *ngFor=\"let option of data.options\">\n                        <label for=\"{{ key ? key : data.label.slugify() }}-input\">{{ option.name }}</label>\n                        <input [type]=\"data.renderType\" [value]=\"option.value\"\n                               [attr.checked]=\"data.control.value === option.value || option.id === data.control.value ? true : null\"\n                               [attr.name]=\"data.renderType == 'radio' ? (key ? key : data.label.slugify()) + '-input' : null\"\n                               (change)=\"updateParentValue($event, option)\"\n                               [formControl]=\"data.control\"\n                        />\n                    </div>\n                </div>\n        \n                <select *ngIf=\"data.renderType == 'select'\" id=\"\"\n                        [attr.multiple]=\"data.expandOptions ? true : null\"\n                        [formControl]=\"data.control\">\n                    <option *ngFor=\"let option of data.options\" [value]=\"option.value\">\n                        {{ option.name ? option.name : option.value }}\n                    </option>\n                </select>\n            </div>\n        </div>\n    ","inputs":["data","key","parent"]}]}],"members":{"customBlock":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["customBlock",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ViewContainerRef"}}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver"}]}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"toBoolean":[{"__symbolic":"method"}],"updateParentValue":[{"__symbolic":"method"}]}}}}]